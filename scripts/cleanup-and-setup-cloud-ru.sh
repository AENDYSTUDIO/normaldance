#!/bin/bash
# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Cloud.ru –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –Ω—É–ª—è –¥–ª—è NORMALDANCE

set -e

echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Cloud.ru –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –Ω—É–ª—è..."

# Configuration
API_KEY="7d6d24281a43e50068d35d63f7ead515"
CUSTOMER_ID="fd8aec7e-aeba-4626-be40-87d9520dc825"
PROJECT_ID="ce41b029-e7ce-4100-b3b3-c38272211b05"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Cloud.ru CLI is installed
check_cli() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ Cloud.ru CLI..."
    if ! command -v cloud &> /dev/null; then
        print_warning "Cloud.ru CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        curl -sSL https://cloud.ru/cli/install.sh | bash
        export PATH="$PATH:$HOME/.cloud/bin"
    fi
    print_success "Cloud.ru CLI –≥–æ—Ç–æ–≤"
}

# Configure Cloud.ru CLI
configure_cli() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloud.ru CLI..."
    cloud config set api-key $API_KEY
    cloud config set customer-id $CUSTOMER_ID
    cloud config set project-id $PROJECT_ID
    print_success "Cloud.ru CLI –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
cleanup_all() {
    print_status "üßπ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É Cloud.ru..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    cloud service list --format json | jq -r '.[].name' | while read service; do
        if [ ! -z "$service" ]; then
            print_status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $service"
            cloud service stop $service || true
        fi
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    print_status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    cloud service list --format json | jq -r '.[].name' | while read service; do
        if [ ! -z "$service" ]; then
            print_status "–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: $service"
            cloud service delete $service --force || true
        fi
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω
    print_status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω..."
    cloud vm list --format json | jq -r '.[].name' | while read vm; do
        if [ ! -z "$vm" ]; then
            print_status "–£–¥–∞–ª–µ–Ω–∏–µ VM: $vm"
            cloud vm delete $vm --force || true
        fi
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤
    print_status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤..."
    cloud disk list --format json | jq -r '.[].name' | while read disk; do
        if [ ! -z "$disk" ]; then
            print_status "–£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Å–∫–∞: $disk"
            cloud disk delete $disk --force || true
        fi
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ç–µ–π
    print_status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ç–µ–π..."
    cloud network list --format json | jq -r '.[].name' | while read network; do
        if [ ! -z "$network" ]; then
            print_status "–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–∏: $network"
            cloud network delete $network --force || true
        fi
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤
    print_status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤..."
    cloud image list --format json | jq -r '.[].name' | while read image; do
        if [ ! -z "$image" ]; then
            print_status "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞: $image"
            cloud image delete $image --force || true
        fi
    done
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
    print_status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤..."
    cloud project list --format json | jq -r '.[].id' | while read project; do
        if [ ! -z "$project" ] && [ "$project" != "$PROJECT_ID" ]; then
            print_status "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: $project"
            cloud project delete $project --force || true
        fi
    done
    
    print_success "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏
verify_cleanup() {
    print_status "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
    services=$(cloud service list --format json | jq length)
    if [ "$services" -eq 0 ]; then
        print_success "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É–¥–∞–ª–µ–Ω—ã"
    else
        print_warning "‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å —Å–µ—Ä–≤–∏—Å–æ–≤: $services"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º VM
    vms=$(cloud vm list --format json | jq length)
    if [ "$vms" -eq 0 ]; then
        print_success "‚úÖ –í—Å–µ VM —É–¥–∞–ª–µ–Ω—ã"
    else
        print_warning "‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å VM: $vms"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫–∏
    disks=$(cloud disk list --format json | jq length)
    if [ "$disks" -eq 0 ]; then
        print_success "‚úÖ –í—Å–µ –¥–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã"
    else
        print_warning "‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–∏—Å–∫–æ–≤: $disks"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–∏
    networks=$(cloud network list --format json | jq length)
    if [ "$networks" -eq 0 ]; then
        print_success "‚úÖ –í—Å–µ —Å–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã"
    else
        print_warning "‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å —Å–µ—Ç–µ–π: $networks"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω—É–ª—è
create_new_project() {
    print_status "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ NORMALDANCE..."
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    cloud project create --name "NORMALDANCE" --description "Web3 Music Platform"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    NEW_PROJECT_ID=$(cloud project list --format json | jq -r '.[] | select(.name=="NORMALDANCE") | .id')
    cloud config set project-id $NEW_PROJECT_ID
    
    print_success "‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: $NEW_PROJECT_ID"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
setup_infrastructure() {
    print_status "üèóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç—å
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏..."
    cloud network create --name "normaldance-network" --cidr "10.0.0.0/16"
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–µ—Ç—å
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–µ—Ç–∏..."
    cloud subnet create --name "normaldance-subnet" --network "normaldance-network" --cidr "10.0.1.0/24"
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    cloud security-group create --name "normaldance-sg" --description "Security group for NORMALDANCE"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print_status "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 22 --cidr "0.0.0.0/0"
    cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 80 --cidr "0.0.0.0/0"
    cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 443 --cidr "0.0.0.0/0"
    cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 3000 --cidr "0.0.0.0/0"
    cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 3001 --cidr "0.0.0.0/0"
    
    print_success "‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ NORMALDANCE
create_services() {
    print_status "üéµ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ NORMALDANCE..."
    
    # –°–æ–∑–¥–∞–µ–º PostgreSQL
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ PostgreSQL..."
    cloud service create postgresql \
        --name "normaldance-db" \
        --version "15" \
        --cpu 0.5 \
        --memory 512Mi \
        --storage 10Gi \
        --network "normaldance-network" \
        --security-group "normaldance-sg" \
        --backup-enabled \
        --backup-schedule "0 2 * * *"
    
    # –°–æ–∑–¥–∞–µ–º Redis
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ Redis..."
    cloud service create redis \
        --name "normaldance-redis" \
        --version "7" \
        --cpu 0.25 \
        --memory 256Mi \
        --storage 1Gi \
        --network "normaldance-network" \
        --security-group "normaldance-sg"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    cloud service create container \
        --name "normaldance-app" \
        --image "node:20-alpine" \
        --cpu 1 \
        --memory 1Gi \
        --replicas 1 \
        --network "normaldance-network" \
        --security-group "normaldance-sg" \
        --port 3000:3000 \
        --port 3001:3001 \
        --env NODE_ENV=production \
        --env DATABASE_URL="postgresql://user:pass@normaldance-db:5432/normaldance" \
        --env REDIS_URL="redis://normaldance-redis:6379" \
        --env NEXTAUTH_URL="https://normaldance.tk" \
        --env NEXTAUTH_SECRET="your_super_secret_key_change_me"
    
    print_success "‚úÖ –°–µ—Ä–≤–∏—Å—ã NORMALDANCE —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
show_final_info() {
    print_success "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloud.ru –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:"
    echo "  üåê Dashboard: https://partners.cloud.ru"
    echo "  üîë API Key: $API_KEY"
    echo "  üìù Project ID: $(cloud config get project-id)"
    echo ""
    echo "üèóÔ∏è –°–æ–∑–¥–∞–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:"
    echo "  üåê –°–µ—Ç—å: normaldance-network"
    echo "  üîí –ì—Ä—É–ø–ø–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: normaldance-sg"
    echo "  üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: normaldance-db"
    echo "  üî¥ Redis: normaldance-redis"
    echo "  üéµ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: normaldance-app"
    echo ""
    echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "  1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω –Ω–∞ Freenom"
    echo "  2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å DNS –∑–∞–ø–∏—Å–∏"
    echo "  3. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "  4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    echo ""
    echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  cloud service list          # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  cloud service status        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  cloud logs normaldance-app  # –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "  cloud service scale normaldance-app --replicas 2  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
}

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
confirm_cleanup() {
    print_warning "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —Ä–µ—Å—É—Ä—Å—ã –≤ Cloud.ru!"
    print_warning "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!"
    echo ""
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): " confirm
    
    if [ "$confirm" != "yes" ]; then
        print_error "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        exit 1
    fi
}

# Main function
main() {
    print_status "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É Cloud.ru —Å –Ω—É–ª—è..."
    echo ""
    
    confirm_cleanup
    check_cli
    configure_cli
    cleanup_all
    verify_cleanup
    create_new_project
    setup_infrastructure
    create_services
    show_final_info
    
    print_success "üéâ Cloud.ru –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –Ω—É–ª—è!"
}

# Run main function
main "$@"
