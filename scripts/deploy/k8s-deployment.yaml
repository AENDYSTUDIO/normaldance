---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: normaldance
  labels:
    name: normaldance

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: normaldance-config
  namespace: normaldance
data:
  NODE_ENV: "production"
  PORT: "3000"
  DATABASE_URL: "postgresql://postgres:$(POSTGRES_PASSWORD)@postgres-service:5432/normaldance"
  REDIS_URL: "redis://redis-service:6379"
  NEXTAUTH_URL: "https://$(DOMAIN)"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: normaldance-secrets
  namespace: normaldance
type: Opaque
data:
  NEXTAUTH_SECRET: # base64 encoded
  POSTGRES_PASSWORD: # base64 encoded
  REDIS_PASSWORD: # base64 encoded
  SENTRY_DSN: # base64 encoded
  HETZNER_TOKEN: # base64 encoded
  CLOUDFLARE_API_TOKEN: # base64 encoded
  GRAFANA_PASSWORD: # base64 encoded

---
# Persistent Volume for PostgreSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: normaldance
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  hostPath:
    path: /data/postgres

---
# Persistent Volume Claim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: normaldance
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: local-storage

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: normaldance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "normaldance"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: normaldance-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: normaldance
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: normaldance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: normaldance-secrets
              key: REDIS_PASSWORD
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: normaldance
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: normaldance-app
  namespace: normaldance
spec:
  replicas: 3
  selector:
    matchLabels:
      app: normaldance-app
  template:
    metadata:
      labels:
        app: normaldance-app
    spec:
      containers:
      - name: app
        image: normaldance:latest
        ports:
        - containerPort: 3000
        envFrom:
        - configMapRef:
            name: normaldance-config
        - secretRef:
            name: normaldance-secrets
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
# WebSocket Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: normaldance-websocket
  namespace: normaldance
spec:
  replicas: 2
  selector:
    matchLabels:
      app: normaldance-websocket
  template:
    metadata:
      labels:
        app: normaldance-websocket
    spec:
      containers:
      - name: websocket
        image: normaldance-websocket:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
# API Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: normaldance-api
  namespace: normaldance
spec:
  replicas: 2
  selector:
    matchLabels:
      app: normaldance-api
  template:
    metadata:
      labels:
        app: normaldance-api
    spec:
      containers:
      - name: api
        image: normaldance-api:latest
        ports:
        - containerPort: 3002
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3002"
        - name: DATABASE_URL
          value: "postgresql://postgres:$(POSTGRES_PASSWORD)@postgres-service:5432/normaldance"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        envFrom:
        - secretRef:
            name: normaldance-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
# Nginx Ingress Controller
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress
  namespace: normaldance
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-ingress
  template:
    metadata:
      labels:
        app: nginx-ingress
    spec:
      containers:
      - name: nginx
        image: nginx/nginx-ingress:latest
        ports:
        - containerPort: 80
        - containerPort: 443
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: normaldance-app-service
  namespace: normaldance
spec:
  selector:
    app: normaldance-app
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: normaldance-websocket-service
  namespace: normaldance
spec:
  selector:
    app: normaldance-websocket
  ports:
  - port: 3001
    targetPort: 3001
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: normaldance-api-service
  namespace: normaldance
spec:
  selector:
    app: normaldance-api
  ports:
  - port: 3002
    targetPort: 3002
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-service
  namespace: normaldance
spec:
  selector:
    app: nginx-ingress
  ports:
  - port: 80
    targetPort: 80
    name: http
  - port: 443
    targetPort: 443
    name: https
  type: LoadBalancer

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: normaldance-ingress
  namespace: normaldance
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - $(DOMAIN)
    - www.$(DOMAIN)
    secretName: normaldance-tls
  rules:
  - host: $(DOMAIN)
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: normaldance-app-service
            port:
              number: 3000
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: normaldance-api-service
            port:
              number: 3002
      - path: /socket.io
        pathType: Prefix
        backend:
          service:
            name: normaldance-websocket-service
            port:
              number: 3001
  - host: www.$(DOMAIN)
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: normaldance-app-service
            port:
              number: 3000

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: normaldance-app-hpa
  namespace: normaldance
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: normaldance-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Prometheus Monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: normaldance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        emptyDir: {}

---
# Grafana Dashboard
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: normaldance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: normaldance-secrets
              key: GRAFANA_PASSWORD
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}
