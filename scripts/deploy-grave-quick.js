#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π G.rave –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * –¶–µ–ª—å: –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –º–æ–¥—É–ª—å –∑–∞ 1 —á–∞—Å
 */

const { ethers } = require('ethers');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
const NETWORKS = {
  localhost: {
    rpc: 'http://localhost:8545',
    chainId: 1337,
    name: 'Localhost',
    explorer: 'http://localhost:8545'
  },
  mumbai: {
    rpc: 'https://rpc-mumbai.maticvigil.com',
    chainId: 80001,
    name: 'Polygon Mumbai',
    explorer: 'https://mumbai.polygonscan.com'
  },
  sepolia: {
    rpc: 'https://sepolia.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',
    chainId: 11155111,
    name: 'Ethereum Sepolia',
    explorer: 'https://sepolia.etherscan.io'
  }
};

async function deployGraveContract() {
  console.log('üíÄ G.rave - –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π Memorial NFT');
  console.log('==========================================');
  
  try {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ç—å
    const network = process.env.NETWORK || 'localhost';
    const config = NETWORKS[network];
    
    if (!config) {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å: ${network}`);
    }
    
    console.log(`üåê –°–µ—Ç—å: ${config.name}`);
    console.log(`üîó RPC: ${config.rpc}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    const provider = new ethers.JsonRpcProvider(config.rpc);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    const privateKey = process.env.PRIVATE_KEY;
    if (!privateKey) {
      console.log('‚ö†Ô∏è  PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á');
      // –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –¥–µ–º–æ (–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –í –ü–†–û–î–ê–ö–®–ï–ù–ï!)
      const testPrivateKey = '0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef';
      const wallet = new ethers.Wallet(testPrivateKey, provider);
      console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫: ${wallet.address}`);
    } else {
      const wallet = new ethers.Wallet(privateKey, provider);
      console.log(`üë§ –ö–æ—à–µ–ª–µ–∫: ${wallet.address}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const networkInfo = await provider.getNetwork();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ç–∏: ${networkInfo.name} (${networkInfo.chainId})`);
    
    // –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const contractPath = 'contracts/GraveMemorialNFT.sol';
    if (!fs.existsSync(contractPath)) {
      throw new Error(`–§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${contractPath}`);
    }
    
    const contractCode = fs.readFileSync(contractPath, 'utf8');
    console.log('üìÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    console.log('üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
    
    // –ü—Ä–æ—Å—Ç–∞—è ABI –¥–ª—è –¥–µ–ø–ª–æ—è
    const abi = [
      "constructor()",
      "function createMemorial(string memory _ipfsHash, address[] memory _heirs, string memory _artistName) public payable returns (uint256)",
      "function donate(uint256 tokenId, string memory message) public payable",
      "function distributeToHeirs(uint256 tokenId) public",
      "function getMemorial(uint256 tokenId) public view returns (tuple(string ipfsHash, address[] heirs, uint256 fundBalance, uint256 platformFee, string artistName, bool isActive, uint256 createdAt))",
      "function getUserMemorials(address user) public view returns (uint256[] memory)",
      "function getMemorialByArtist(string memory artistName) public view returns (uint256)",
      "function visitMemorial(uint256 tokenId) public",
      "function tokenURI(uint256 tokenId) public view returns (string memory)",
      "function owner() public view returns (address)",
      "function emergencyWithdraw() public"
    ];
    
    const factory = new ethers.ContractFactory(abi, contractCode, wallet);
    
    // –î–µ–ø–ª–æ–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    console.log('üöÄ –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
    const contract = await factory.deploy();
    await contract.waitForDeployment();
    
    const contractAddress = await contract.getAddress();
    console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω!`);
    console.log(`üìç –ê–¥—Ä–µ—Å: ${contractAddress}`);
    console.log(`üîó Explorer: ${config.explorer}/address/${contractAddress}`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–º–µ–º–æ—Ä–∏–∞–ª
    console.log('ü™¶ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–º–µ–º–æ—Ä–∏–∞–ª–∞...');
    
    try {
      const demoHeirs = [wallet.address]; // –ù–∞—Å–ª–µ–¥–Ω–∏–∫ - —Å–∞–º —Å–æ–∑–¥–∞—Ç–µ–ª—å
      const tx = await contract.createMemorial(
        'QmDemoMemorial123', // IPFS hash
        demoHeirs,           // –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏
        'DJ Eternal'         // –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞
      );
      
      await tx.wait();
      console.log('‚úÖ –î–µ–º–æ-–º–µ–º–æ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω!');
      console.log(`üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${config.explorer}/tx/${tx.hash}`);
    } catch (error) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–º–µ–º–æ—Ä–∏–∞–ª:', error.message);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
    const contractInfo = {
      address: contractAddress,
      network: config.name,
      chainId: config.chainId,
      deployer: wallet.address,
      deployedAt: new Date().toISOString(),
      explorer: config.explorer,
      abi: abi,
      demoMemorial: {
        artistName: 'DJ Eternal',
        ipfsHash: 'QmDemoMemorial123',
        heirs: [wallet.address]
      }
    };
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É contracts –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync('contracts')) {
      fs.mkdirSync('contracts');
    }
    
    fs.writeFileSync(
      'contracts/grave-deployed.json',
      JSON.stringify(contractInfo, null, 2)
    );
    
    console.log('üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ contracts/grave-deployed.json');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∞–¥—Ä–µ—Å–æ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const frontendConfig = {
      GRAVE_CONTRACT_ADDRESS: contractAddress,
      GRAVE_NETWORK: config.name,
      GRAVE_CHAIN_ID: config.chainId,
      GRAVE_EXPLORER: config.explorer
    };
    
    fs.writeFileSync(
      'src/lib/grave-config.json',
      JSON.stringify(frontendConfig, null, 2)
    );
    
    console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ src/lib/grave-config.json');
    
    console.log('');
    console.log('üíÄ –ì–û–¢–û–í–û! G.rave Memorial NFT –∑–∞–¥–µ–ø–ª–æ–µ–Ω');
    console.log('========================================');
    console.log('‚úÖ Smart-contract —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –î–µ–º–æ-–º–µ–º–æ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω');
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    console.log('');
    console.log('üí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥!');
    console.log('   npm run dev ‚Üí http://localhost:3000/grave');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error.message);
    console.log('');
    console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PRIVATE_KEY –≤ .env');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å ETH –¥–ª—è gas');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
if (require.main === module) {
  deployGraveContract();
}

module.exports = { deployGraveContract };
