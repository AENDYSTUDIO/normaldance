#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ NORMALDANCE 2025
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * 1. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
 * 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 */

const fs = require('fs');
const path = require('path');

class DocumentUnifier {
    constructor() {
        this.masterDocPath = 'NORMALDANCE_2025_MASTER.md';
        this.specializedDocs = [
            'DETAILED_COST_ANALYSIS_NORMALDANCE_2025.md',
            'COMPREHENSIVE_PROJECT_ANALYSIS_NORMALDANCE_2025.md',
            'IMPLEMENTATION_REPORT_2025.md',
            'GRAVE_SUCCESS_REPORT.md',
            'ATR_IMPLEMENTATION_README.md',
            'GRAVE_README.md',
            'INNOVATIONS_2025_README.md',
            'CHANGELOG.md'
        ];
        this.duplicates = new Map();
        this.inconsistencies = new Map();
        this.metrics = {
            totalFiles: 0,
            duplicatesFound: 0,
            inconsistenciesFound: 0,
            filesProcessed: 0
        };
    }

    async init() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
        console.log('üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ NORMALDANCE 2025');
        
        await this.checkFilesExistence();
        await this.analyzeDuplicates();
        await this.checkInconsistencies();
        await this.generateReport();
        
        console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    async checkFilesExistence() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤...');
        
        const requiredFiles = [this.masterDocPath, ...this.specializedDocs];
        
        for (const file of requiredFiles) {
            if (!fs.existsSync(file)) {
                console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`);
            } else {
                this.metrics.totalFiles++;
            }
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.metrics.totalFiles} –∏–∑ ${requiredFiles.length} —Ñ–∞–π–ª–æ–≤`);
    }

    async analyzeDuplicates() {
        console.log('üîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
        
        const contentMap = new Map();
        
        for (const docPath of this.specializedDocs) {
            if (fs.existsSync(docPath)) {
                const content = fs.readFileSync(docPath, 'utf8');
                contentMap.set(docPath, content);
            }
        }
        
        const sections = [
            'Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
            '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫',
            '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
            '–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
            'Solana',
            'Next.js',
            'NFT',
            '–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è'
        ];
        
        for (const section of sections) {
            const duplicates = [];
            
            for (const [docPath, content] of contentMap) {
                if (content.includes(section)) {
                    duplicates.push(docPath);
                }
            }
            
            if (duplicates.length > 1) {
                this.duplicates.set(section, duplicates);
                this.metrics.duplicatesFound++;
            }
        }
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${this.metrics.duplicatesFound} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤`);
    }

    async checkInconsistencies() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π...');
        
        await this.checkFinancialInconsistencies();
        await this.checkTechnicalInconsistencies();
        await this.checkTeamInconsistencies();
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${this.metrics.inconsistenciesFound} –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π`);
    }

    async checkFinancialInconsistencies() {
        const financialDocs = [
            'DETAILED_COST_ANALYSIS_NORMALDANCE_2025.md',
            'COMPREHENSIVE_PROJECT_ANALYSIS_NORMALDANCE_2025.md',
            'IMPLEMENTATION_REPORT_2025.md'
        ];
        
        const budgetValues = new Map();
        
        for (const docPath of financialDocs) {
            if (fs.existsSync(docPath)) {
                const content = fs.readFileSync(docPath, 'utf8');
                
                const budgetMatch = content.match(/(?:–±—é–¥–∂–µ—Ç|Budget|CAPEX|OPEX)[:\s]*([\d,]+)\s*(‚ÇΩ|USD|\$)/i);
                if (budgetMatch) {
                    budgetValues.set(docPath, {
                        value: budgetMatch[1],
                        currency: budgetMatch[2],
                        raw: budgetMatch[0]
                    });
                }
            }
        }
        
        const values = Array.from(budgetValues.values());
        if (values.length > 1) {
            const uniqueValues = new Set(values.map(v => v.value));
            if (uniqueValues.size > 1) {
                this.inconsistencies.set('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏', {
                    type: 'budget',
                    documents: Array.from(budgetValues.keys()),
                    values: budgetValues
                });
                this.metrics.inconsistenciesFound++;
            }
        }
    }

    async checkTechnicalInconsistencies() {
        const technicalDocs = [
            'COMPREHENSIVE_PROJECT_ANALYSIS_NORMALDANCE_2025.md',
            'IMPLEMENTATION_REPORT_2025.md',
            'INNOVATIONS_2025_README.md'
        ];
        
        const speedValues = new Map();
        
        for (const docPath of technicalDocs) {
            if (fs.existsSync(docPath)) {
                const content = fs.readFileSync(docPath, 'utf8');
                
                const speedMatch = content.match(/(?:—Å–∫–æ—Ä–æ—Å—Ç—å|speed|–≤—Ä–µ–º—è|time)[:\s]*([\d.]+)\s*(—Å–µ–∫|seconds?)/i);
                if (speedMatch) {
                    speedValues.set(docPath, {
                        value: speedMatch[1],
                        unit: speedMatch[2],
                        raw: speedMatch[0]
                    });
                }
            }
        }
        
        const values = Array.from(speedValues.values());
        if (values.length > 1) {
            const uniqueValues = new Set(values.map(v => v.value));
            if (uniqueValues.size > 1) {
                this.inconsistencies.set('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏', {
                    type: 'speed',
                    documents: Array.from(speedValues.keys()),
                    values: speedValues
                });
                this.metrics.inconsistenciesFound++;
            }
        }
    }

    async checkTeamInconsistencies() {
        const teamDocs = [
            'COMPREHENSIVE_PROJECT_ANALYSIS_NORMALDANCE_2025.md',
            'IMPLEMENTATION_REPORT_2025.md',
            'ATR_IMPLEMENTATION_README.md'
        ];
        
        const teamSizes = new Map();
        
        for (const docPath of teamDocs) {
            if (fs.existsSync(docPath)) {
                const content = fs.readFileSync(docPath, 'utf8');
                
                const teamMatch = content.match(/(?:–∫–æ–º–∞–Ω–¥–∞|team|—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫|developer)[:\s]*([\d]+)/i);
                if (teamMatch) {
                    teamSizes.set(docPath, {
                        value: teamMatch[1],
                        raw: teamMatch[0]
                    });
                }
            }
        }
        
        const values = Array.from(teamSizes.values());
        if (values.length > 1) {
            const uniqueValues = new Set(values.map(v => v.value));
            if (uniqueValues.size > 1) {
                this.inconsistencies.set('–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', {
                    type: 'team',
                    documents: Array.from(teamSizes.keys()),
                    values: teamSizes
                });
                this.metrics.inconsistenciesFound++;
            }
        }
    }

    async generateReport() {
        console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
        
        const report = {
            timestamp: new Date().toISOString(),
            metrics: this.metrics,
            duplicates: Object.fromEntries(this.duplicates),
            inconsistencies: Object.fromEntries(this.inconsistencies),
            recommendations: this.generateRecommendations()
        };
        
        const reportPath = 'unification-report.json';
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        
        console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
        this.printReport(report);
    }

    generateRecommendations() {
        const recommendations = [];
        
        if (this.metrics.duplicatesFound > 0) {
            recommendations.push({
                type: 'duplicates',
                priority: 'high',
                action: '–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                description: '–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö'
            });
        }
        
        if (this.metrics.inconsistenciesFound > 0) {
            recommendations.push({
                type: 'inconsistencies',
                priority: 'high',
                action: '–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö',
                description: '–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
            });
        }
        
        recommendations.push({
            type: 'standardization',
            priority: 'medium',
            action: '–í–Ω–µ–¥—Ä–∏—Ç—å —à–∞–±–ª–æ–Ω—ã —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
        });
        
        return recommendations;
    }

    printReport(report) {
        console.log('\nüìä –û–¢–ß–ï–¢ –£–ù–ò–§–ò–ö–ê–¶–ò–ò');
        console.log('='.repeat(50));
        console.log(`üìÖ –í—Ä–µ–º—è: ${report.timestamp}`);
        console.log(`üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${report.metrics.totalFiles}`);
        console.log(`üîÑ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: ${report.metrics.duplicatesFound}`);
        console.log(`‚ö†Ô∏è  –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: ${report.metrics.inconsistenciesFound}`);
        
        console.log('\nüìã –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:');
        for (const [section, docs] of Object.entries(report.duplicates)) {
            console.log(`  ${section}: ${docs.join(', ')}`);
        }
        
        console.log('\n‚ö†Ô∏è  –ü–†–û–¢–ò–í–û–†–ï–ß–ò–Ø:');
        for (const [section, data] of Object.entries(report.inconsistencies)) {
            console.log(`  ${section}: ${data.type} –≤ ${data.documents.join(', ')}`);
        }
        
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        for (const rec of report.recommendations) {
            console.log(`  [${rec.priority}] ${rec.action}`);
            console.log(`    ${rec.description}`);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const unifier = new DocumentUnifier();
    unifier.init().catch(console.error);
}

module.exports = DocumentUnifier;
