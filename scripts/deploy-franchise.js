#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è NFT Franchise –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * –¶–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å NFT-—Ñ—Ä–∞–Ω—à–∏–∑—É –¥–ª—è –ø–µ—Ä–≤—ã—Ö 100 —Ç—Ä–µ–∫–æ–≤
 */

const { ethers } = require('ethers');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏
const NETWORK_CONFIG = {
  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º Sepolia
  sepolia: {
    rpc: 'https://sepolia.infura.io/v3/YOUR_INFURA_KEY',
    chainId: 11155111,
    name: 'Sepolia Testnet'
  },
  // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - Ethereum Mainnet
  mainnet: {
    rpc: 'https://mainnet.infura.io/v3/YOUR_INFURA_KEY',
    chainId: 1,
    name: 'Ethereum Mainnet'
  }
};

async function deployFranchiseContract() {
  console.log('üöÄ NORMAL DANCE - –î–µ–ø–ª–æ–π NFT Franchise –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
  console.log('================================================');
  
  try {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Sepolia –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const network = process.env.NETWORK || 'sepolia';
    const config = NETWORK_CONFIG[network];
    
    if (!config) {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç—å: ${network}`);
    }
    
    console.log(`üåê –°–µ—Ç—å: ${config.name}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    const provider = new ethers.JsonRpcProvider(config.rpc);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const privateKey = process.env.PRIVATE_KEY;
    if (!privateKey) {
      throw new Error('PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫
    const wallet = new ethers.Wallet(privateKey, provider);
    console.log(`üë§ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${wallet.address}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const balance = await provider.getBalance(wallet.address);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} ETH`);
    
    if (balance < ethers.parseEther('0.01')) {
      console.warn('‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –¥–µ–ø–ª–æ—è');
    }
    
    // –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const contractCode = require('fs').readFileSync('contracts/NFTFranchise.sol', 'utf8');
    console.log('üìÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    console.log('üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const factory = new ethers.ContractFactory(
      [
        // ABI –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        'function createFranchise(string memory trackId, string memory artistName, string memory trackTitle, uint256 totalShares, uint256 pricePerShare) external',
        'function purchaseShares(uint256 franchiseId, uint256 shares) external payable',
        'function distributeRevenue(uint256 franchiseId, uint256 revenue) external',
        'function getFranchise(uint256 franchiseId) external view returns (tuple(uint256 id, string trackId, string artistName, string trackTitle, uint256 totalShares, uint256 soldShares, uint256 pricePerShare, uint256 totalRevenue, bool isActive, address artist, uint256 createdAt))',
        'function getUserShares(address user, uint256 franchiseId) external view returns (uint256)',
        'function getFranchiseByTrack(string memory trackId) external view returns (uint256)',
        'function calculateUserRevenue(address user, uint256 franchiseId, uint256 totalRevenue) external view returns (uint256)'
      ],
      contractCode,
      wallet
    );
    
    // –î–µ–ø–ª–æ–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    console.log('üöÄ –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
    const contract = await factory.deploy();
    await contract.waitForDeployment();
    
    const contractAddress = await contract.getAddress();
    console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω!`);
    console.log(`üìç –ê–¥—Ä–µ—Å: ${contractAddress}`);
    console.log(`üîó Explorer: https://${network === 'mainnet' ? 'etherscan.io' : 'sepolia.etherscan.io'}/address/${contractAddress}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Ñ—Ä–∞–Ω—à–∏–∑—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('üéµ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ñ—Ä–∞–Ω—à–∏–∑—ã...');
    
    const tx = await contract.createFranchise(
      'QmDemoTrack123', // IPFS hash
      'Demo Artist',     // Artist name
      'First Track',     // Track title
      100,               // 100 shares (100%)
      ethers.parseEther('0.01') // 0.01 ETH per share
    );
    
    await tx.wait();
    console.log('‚úÖ –ü–µ—Ä–≤–∞—è —Ñ—Ä–∞–Ω—à–∏–∑–∞ —Å–æ–∑–¥–∞–Ω–∞!');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
    const contractInfo = {
      address: contractAddress,
      network: config.name,
      chainId: config.chainId,
      deployer: wallet.address,
      deployedAt: new Date().toISOString(),
      firstFranchise: {
        trackId: 'QmDemoTrack123',
        artistName: 'Demo Artist',
        trackTitle: 'First Track',
        totalShares: 100,
        pricePerShare: '0.01 ETH'
      }
    };
    
    require('fs').writeFileSync(
      'contract-info.json',
      JSON.stringify(contractInfo, null, 2)
    );
    
    console.log('üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ contract-info.json');
    
    console.log('');
    console.log('üéâ –ì–û–¢–û–í–û! NFT Franchise –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω');
    console.log('==========================================');
    console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ü–µ—Ä–≤–∞—è —Ñ—Ä–∞–Ω—à–∏–∑–∞ —Å–æ–∑–¥–∞–Ω–∞');
    console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∂–µ –¥–æ–ª–µ–π');
    console.log('');
    console.log('üí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø—Ä–∏–≤–ª–µ—á—å –ø–µ—Ä–≤–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
if (require.main === module) {
  deployFranchiseContract();
}

module.exports = { deployFranchiseContract };
