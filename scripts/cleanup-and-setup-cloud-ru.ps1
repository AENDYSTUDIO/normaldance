# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ Cloud.ru –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –Ω—É–ª—è

param(
    [switch]$Quick,
    [switch]$Confirm
)

# Configuration
$API_KEY = "7d6d24281a43e50068d35d63f7ead515"
$CUSTOMER_ID = "fd8aec7e-aeba-4626-be40-87d9520dc825"
$PROJECT_ID = "ce41b029-e7ce-4100-b3b3-c38272211b05"

# Colors
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"

function Write-Status {
    param($Message)
    Write-Host "[INFO] $Message" -ForegroundColor $Blue
}

function Write-Success {
    param($Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor $Green
}

function Write-Warning {
    param($Message)
    Write-Host "[WARNING] $Message" -ForegroundColor $Yellow
}

function Write-Error {
    param($Message)
    Write-Host "[ERROR] $Message" -ForegroundColor $Red
}

# Check if Cloud.ru CLI is installed
function Test-CloudCLI {
    Write-Status "–ü—Ä–æ–≤–µ—Ä–∫–∞ Cloud.ru CLI..."
    try {
        $cloudVersion = cloud --version
        Write-Success "Cloud.ru CLI –Ω–∞–π–¥–µ–Ω: $cloudVersion"
        return $true
    }
    catch {
        Write-Warning "Cloud.ru CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        try {
            Invoke-WebRequest -Uri "https://cloud.ru/cli/install.ps1" -OutFile "install-cloud-cli.ps1"
            .\install-cloud-cli.ps1
            Write-Success "Cloud.ru CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            return $true
        }
        catch {
            Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Cloud.ru CLI"
            return $false
        }
    }
}

# Configure Cloud.ru CLI
function Set-CloudConfig {
    Write-Status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloud.ru CLI..."
    try {
        cloud config set api-key $API_KEY
        cloud config set customer-id $CUSTOMER_ID
        cloud config set project-id $PROJECT_ID
        Write-Success "Cloud.ru CLI –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Cloud.ru CLI"
        throw
    }
}

# Quick cleanup (only services and VMs)
function Invoke-QuickCleanup {
    Write-Status "üßπ –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    # Stop all services
    Write-Status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    try {
        $services = cloud service list --format json | ConvertFrom-Json
        foreach ($service in $services) {
            if ($service.name) {
                Write-Status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $($service.name)"
                cloud service stop $service.name
            }
        }
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: $_"
    }
    
    # Delete all services
    Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    try {
        $services = cloud service list --format json | ConvertFrom-Json
        foreach ($service in $services) {
            if ($service.name) {
                Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: $($service.name)"
                cloud service delete $service.name --force
            }
        }
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: $_"
    }
    
    # Delete all VMs
    Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ VM..."
    try {
        $vms = cloud vm list --format json | ConvertFrom-Json
        foreach ($vm in $vms) {
            if ($vm.name) {
                Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ VM: $($vm.name)"
                cloud vm delete $vm.name --force
            }
        }
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è VM: $_"
    }
    
    Write-Success "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# Full cleanup (all resources)
function Invoke-FullCleanup {
    Write-Status "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Cloud.ru..."
    
    # Stop all services
    Write-Status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    try {
        $services = cloud service list --format json | ConvertFrom-Json
        foreach ($service in $services) {
            if ($service.name) {
                Write-Status "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $($service.name)"
                cloud service stop $service.name
            }
        }
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: $_"
    }
    
    # Delete all services
    Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    try {
        $services = cloud service list --format json | ConvertFrom-Json
        foreach ($service in $services) {
            if ($service.name) {
                Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: $($service.name)"
                cloud service delete $service.name --force
            }
        }
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: $_"
    }
    
    # Delete all VMs
    Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö VM..."
    try {
        $vms = cloud vm list --format json | ConvertFrom-Json
        foreach ($vm in $vms) {
            if ($vm.name) {
                Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ VM: $($vm.name)"
                cloud vm delete $vm.name --force
            }
        }
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è VM: $_"
    }
    
    # Delete all disks
    Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤..."
    try {
        $disks = cloud disk list --format json | ConvertFrom-Json
        foreach ($disk in $disks) {
            if ($disk.name) {
                Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Å–∫–∞: $($disk.name)"
                cloud disk delete $disk.name --force
            }
        }
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Å–∫–æ–≤: $_"
    }
    
    # Delete all networks
    Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ç–µ–π..."
    try {
        $networks = cloud network list --format json | ConvertFrom-Json
        foreach ($network in $networks) {
            if ($network.name) {
                Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–∏: $($network.name)"
                cloud network delete $network.name --force
            }
        }
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ç–µ–π: $_"
    }
    
    # Delete all images
    Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤..."
    try {
        $images = cloud image list --format json | ConvertFrom-Json
        foreach ($image in $images) {
            if ($image.name) {
                Write-Status "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞: $($image.name)"
                cloud image delete $image.name --force
            }
        }
    }
    catch {
        Write-Warning "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤: $_"
    }
    
    Write-Success "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# Create new project
function New-CloudProject {
    Write-Status "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ NORMALDANCE..."
    try {
        cloud project create --name "NORMALDANCE" --description "Web3 Music Platform"
        $newProject = cloud project list --format json | ConvertFrom-Json | Where-Object { $_.name -eq "NORMALDANCE" }
        if ($newProject) {
            cloud config set project-id $newProject.id
            Write-Success "‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: $($newProject.id)"
        }
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $_"
        throw
    }
}

# Setup infrastructure
function Set-Infrastructure {
    Write-Status "üèóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    
    try {
        # Create network
        Write-Status "–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏..."
        cloud network create --name "normaldance-network" --cidr "10.0.0.0/16"
        
        # Create subnet
        Write-Status "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–µ—Ç–∏..."
        cloud subnet create --name "normaldance-subnet" --network "normaldance-network" --cidr "10.0.1.0/24"
        
        # Create security group
        Write-Status "–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
        cloud security-group create --name "normaldance-sg" --description "Security group for NORMALDANCE"
        
        # Add security rules
        Write-Status "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
        cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 22 --cidr "0.0.0.0/0"
        cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 80 --cidr "0.0.0.0/0"
        cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 443 --cidr "0.0.0.0/0"
        cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 3000 --cidr "0.0.0.0/0"
        cloud security-group-rule create --security-group "normaldance-sg" --direction ingress --protocol tcp --port 3001 --cidr "0.0.0.0/0"
        
        Write-Success "‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: $_"
        throw
    }
}

# Create services
function New-Services {
    Write-Status "üéµ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ NORMALDANCE..."
    
    try {
        # Create PostgreSQL
        Write-Status "–°–æ–∑–¥–∞–Ω–∏–µ PostgreSQL..."
        cloud service create postgresql --name "normaldance-db" --version "15" --cpu 0.5 --memory 512Mi --storage 10Gi --network "normaldance-network" --security-group "normaldance-sg" --backup-enabled --backup-schedule "0 2 * * *"
        
        # Create Redis
        Write-Status "–°–æ–∑–¥–∞–Ω–∏–µ Redis..."
        cloud service create redis --name "normaldance-redis" --version "7" --cpu 0.25 --memory 256Mi --storage 1Gi --network "normaldance-network" --security-group "normaldance-sg"
        
        # Create application
        Write-Status "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        cloud service create container --name "normaldance-app" --image "node:20-alpine" --cpu 1 --memory 1Gi --replicas 1 --network "normaldance-network" --security-group "normaldance-sg" --port 3000:3000 --port 3001:3001 --env NODE_ENV=production --env DATABASE_URL="postgresql://user:pass@normaldance-db:5432/normaldance" --env REDIS_URL="redis://normaldance-redis:6379" --env NEXTAUTH_URL="https://normaldance.tk" --env NEXTAUTH_SECRET="your_super_secret_key_change_me"
        
        Write-Success "‚úÖ –°–µ—Ä–≤–∏—Å—ã NORMALDANCE —Å–æ–∑–¥–∞–Ω—ã"
    }
    catch {
        Write-Error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: $_"
        throw
    }
}

# Show final info
function Show-FinalInfo {
    Write-Success "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloud.ru –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    Write-Host ""
    Write-Host "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:"
    Write-Host "  üåê Dashboard: https://partners.cloud.ru"
    Write-Host "  üîë API Key: $API_KEY"
    Write-Host "  üìù Project ID: $(cloud config get project-id)"
    Write-Host ""
    Write-Host "üèóÔ∏è –°–æ–∑–¥–∞–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:"
    Write-Host "  üåê –°–µ—Ç—å: normaldance-network"
    Write-Host "  üîí –ì—Ä—É–ø–ø–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: normaldance-sg"
    Write-Host "  üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: normaldance-db"
    Write-Host "  üî¥ Redis: normaldance-redis"
    Write-Host "  üéµ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: normaldance-app"
    Write-Host ""
    Write-Host "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    Write-Host "  1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω –Ω–∞ Freenom"
    Write-Host "  2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å DNS –∑–∞–ø–∏—Å–∏"
    Write-Host "  3. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    Write-Host "  4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    Write-Host ""
    Write-Host "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    Write-Host "  cloud service list          # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
    Write-Host "  cloud service status        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    Write-Host "  cloud logs normaldance-app  # –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    Write-Host "  cloud service scale normaldance-app --replicas 2  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
}

# Confirm cleanup
function Confirm-Cleanup {
    if (-not $Confirm) {
        Write-Warning "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —Ä–µ—Å—É—Ä—Å—ã –≤ Cloud.ru!"
        Write-Warning "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!"
        Write-Host ""
        $confirm = Read-Host "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no)"
        if ($confirm -ne "yes") {
            Write-Error "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            exit 1
        }
    }
}

# Main function
function Main {
    Write-Status "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É Cloud.ru —Å –Ω—É–ª—è..."
    Write-Host ""
    
    if (-not (Test-CloudCLI)) {
        Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Cloud.ru CLI"
        exit 1
    }
    
    Set-CloudConfig
    Confirm-Cleanup
    
    if ($Quick) {
        Invoke-QuickCleanup
    }
    else {
        Invoke-FullCleanup
        New-CloudProject
        Set-Infrastructure
        New-Services
    }
    
    Show-FinalInfo
    Write-Success "üéâ Cloud.ru –≥–æ—Ç–æ–≤ –¥–ª—è NORMALDANCE!"
}

# Run main function
Main
