#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ NORMAL DANCE
 * –¶–µ–ª—å: –ø–æ–ª—É—á–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å 0 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
 */

import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'

const db = new PrismaClient()

async function resetDatabase() {
  console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º foreign keys)
    await db.purchase.deleteMany()
    await db.nFT.deleteMany()
    await db.playHistory.deleteMany()
    await db.follow.deleteMany()
    await db.reward.deleteMany()
    await db.comment.deleteMany()
    await db.like.deleteMany()
    await db.playlistTrack.deleteMany()
    await db.playlist.deleteMany()
    await db.track.deleteMany()
    await db.stake.deleteMany()
    await db.user.deleteMany()
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error)
    throw error
  }
}

async function resetMockFiles() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤...')
  
  const filesToClean = [
    'src/app/page.tsx',
    'src/app/profile/page.tsx',
    'src/components/discovery/discovery-page.tsx',
    'src/components/profile/listening-stats.tsx',
    'src/components/unified/unified-system.tsx',
    'src/components/wallet/music-nft-manager.tsx',
    'src/components/chat/chat-matrix.tsx',
    'src/components/audio/playlist-manager.tsx',
    'src/components/recommendations/recommendation-engine.tsx',
    'src/components/staking/staking-interface.tsx',
    'src/components/rewards/achievements-system.tsx',
    'src/components/rewards/charts-and-shop.tsx',
    'src/components/rewards/referral-system.tsx',
    'src/components/wallet/staking-manager.tsx',
    'src/components/wallet/ndt-manager.tsx',
    'src/components/profile/artist-portfolio.tsx',
    'src/components/profile/artist-subscriptions.tsx',
    'src/components/profile/social-integration.tsx',
    'src/components/audio/listening-now.tsx'
  ]
  
  for (const filePath of filesToClean) {
    try {
      if (fs.existsSync(filePath)) {
        let content = fs.readFileSync(filePath, 'utf-8')
        
        // –ó–∞–º–µ–Ω—è–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã/–æ–±—ä–µ–∫—Ç—ã
        content = content.replace(/const mock\w+.*?=.*?\[[\s\S]*?\];/g, 'const mockData = [];')
        content = content.replace(/const mock\w+.*?=.*?\{[\s\S]*?\};/g, 'const mockData = {};')
        content = content.replace(/mock\w+\.\w+/g, '[]')
        content = content.replace(/set\w+\(mock\w+\)/g, 'setData([])')
        
        // –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
        content = content.replace(/\/\/ Mock data.*?\n/g, '')
        content = content.replace(/\/\/ Mock.*?\n/g, '')
        
        fs.writeFileSync(filePath, content)
        console.log(`‚úÖ –û—á–∏—â–µ–Ω —Ñ–∞–π–ª: ${filePath}`)
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ ${filePath}:`, error)
    }
  }
}

async function createEmptyStateFiles() {
  console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø—É—Å—Ç—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º...')
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const emptyStateContent = `// –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
export const EMPTY_STATE = {
  users: [],
  tracks: [],
  playlists: [],
  nfts: [],
  transactions: [],
  stakingPools: [],
  achievements: [],
  rewards: []
}

export const INITIAL_METRICS = {
  totalUsers: 0,
  totalTracks: 0,
  totalPlays: 0,
  totalRevenue: 0,
  activeUsers: 0,
  monthlyRevenue: 0
}
`
  
  fs.writeFileSync('src/lib/empty-state.ts', emptyStateContent)
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª empty-state.ts')
}

async function updateEnvironmentVariables() {
  console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...')
  
  const envContent = `# NORMAL DANCE - Production Environment
# –ß–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç —Å 0 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# Database
DATABASE_URL="file:./db/production.db"

# Web3
SOLANA_RPC_URL="https://api.mainnet-beta.solana.com"
SOLANA_WS_URL="wss://api.mainnet-beta.solana.com"

# IPFS
IPFS_GATEWAY_URL="https://ipfs.io/ipfs/"
PINATA_API_KEY=""
PINATA_SECRET_KEY=""

# Analytics (–æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞)
MIXPANEL_TOKEN=""
SENTRY_DSN=""

# Server
NEXTAUTH_URL="https://normaldance.com"
NEXTAUTH_SECRET=""

# Production flags
NODE_ENV="production"
DISABLE_ANALYTICS="true"
HONEST_MODE="true"
`
  
  fs.writeFileSync('.env.production', envContent)
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω .env.production')
}

async function main() {
  console.log('üöÄ NORMAL DANCE - –°–±—Ä–æ—Å –∫ —á–µ—Å—Ç–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é')
  console.log('===============================================')
  
  try {
    await resetDatabase()
    await resetMockFiles()
    await createEmptyStateFiles()
    await updateEnvironmentVariables()
    
    console.log('')
    console.log('üéâ –ì–û–¢–û–í–û! –ü—Ä–æ–µ–∫—Ç —Å–±—Ä–æ—à–µ–Ω –∫ —á–µ—Å—Ç–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é:')
    console.log('   ‚úÖ 0 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    console.log('   ‚úÖ 0 —Ç—Ä–µ–∫–æ–≤')
    console.log('   ‚úÖ 0 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
    console.log('   ‚úÖ –ß–∏—Å—Ç—ã–π –∫–æ–¥ –±–µ–∑ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö')
    console.log('   ‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É')
    console.log('')
    console.log('üí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä')
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  } finally {
    await db.$disconnect()
  }
}

if (require.main === module) {
  main()
}
