import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { WalletProvider } from '@/components/wallet/wallet-provider'
import { DonateButton } from '@/components/donate/donate-button'
import { Connection, PublicKey, Transaction } from '@solana/web3.js'

// Mock Solana wallet
const mockWallet = {
  publicKey: new PublicKey('9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'),
  connected: true,
  connecting: false,
  disconnecting: false,
  sendTransaction: jest.fn(),
  signTransaction: jest.fn(),
  signAllTransactions: jest.fn(),
  connect: jest.fn(),
  disconnect: jest.fn()
}

jest.mock('@solana/wallet-adapter-react', () => ({
  useWallet: () => mockWallet,
  WalletProvider: ({ children }: any) => <div>{children}</div>,
  ConnectionProvider: ({ children }: any) => <div>{children}</div>
}))

describe('üî• –î–ï–¢–ê–õ–¨–ù–´–ï WEB3 –¢–ï–°–¢–´', () => {
  beforeEach(() => {
    jest.clearAllMocks()
    global.fetch = jest.fn()
  })

  describe('üí∞ DONATE –°–ò–°–¢–ï–ú–ê', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–æ–Ω–∞—Ç–∞', () => {
      render(
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test Artist" />
        </WalletProvider>
      )
      expect(screen.getByText('üíù –î–æ–Ω–∞—Ç')).toBeInTheDocument()
    })

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª –ø—Ä–∏ –∫–ª–∏–∫–µ', async () => {
      render(
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test Artist" />
        </WalletProvider>
      )
      
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      await waitFor(() => {
        expect(screen.getByText('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å Test Artist')).toBeInTheDocument()
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞', async () => {
      render(
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test Artist" />
        </WalletProvider>
      )
      
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      const input = screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL')
      const button = screen.getByText(/–î–æ–Ω–∞—Ç/)
      
      // –ü—É—Å—Ç–∞—è —Å—É–º–º–∞
      expect(button).toBeDisabled()
      
      // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
      fireEvent.change(input, { target: { value: '-1' } })
      expect(button).toBeDisabled()
      
      // –í–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞
      fireEvent.change(input, { target: { value: '1' } })
      expect(button).not.toBeDisabled()
    })

    test('–¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é 2%', async () => {
      const donationAmount = 1 // 1 SOL
      const expectedFee = donationAmount * 0.02 // 2%
      const expectedArtistAmount = donationAmount - expectedFee
      
      mockWallet.sendTransaction.mockResolvedValue('success')
      
      render(
        <WalletProvider>
          <DonateButton artistWallet="artist123" artistName="Test Artist" />
        </WalletProvider>
      )
      
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL'), { 
        target: { value: donationAmount.toString() } 
      })
      fireEvent.click(screen.getByText(`–î–æ–Ω–∞—Ç ${donationAmount} SOL`))
      
      await waitFor(() => {
        expect(mockWallet.sendTransaction).toHaveBeenCalledWith(
          expect.any(Transaction),
          expect.any(Connection)
        )
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', async () => {
      mockWallet.sendTransaction.mockRejectedValue(new Error('Transaction failed'))
      global.alert = jest.fn()
      
      render(
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test Artist" />
        </WalletProvider>
      )
      
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL'), { 
        target: { value: '1' } 
      })
      fireEvent.click(screen.getByText('–î–æ–Ω–∞—Ç 1 SOL'))
      
      await waitFor(() => {
        expect(global.alert).toHaveBeenCalledWith('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–Ω–∞—Ç–∞')
      })
    })
  })

  describe('ü™¶ NFT –ú–ï–ú–û–†–ò–ê–õ–´', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å NFT –º–µ–º–æ—Ä–∏–∞–ª –∑–∞ 0.01 SOL', async () => {
      const { NFTMemorialMint } = await import('@/components/nft/nft-memorial-mint')
      
      mockWallet.sendTransaction.mockResolvedValue('success')
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve({ success: true })
      })
      
      render(
        <WalletProvider>
          <NFTMemorialMint />
        </WalletProvider>
      )
      
      fireEvent.change(screen.getByPlaceholderText('–ò–º—è –¥–ª—è –º–µ–º–æ—Ä–∏–∞–ª–∞'), {
        target: { value: 'Test Memorial' }
      })
      fireEvent.change(screen.getByPlaceholderText('–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–∞–º—è—Ç—å...'), {
        target: { value: 'Test message' }
      })
      
      fireEvent.click(screen.getByText('ü™¶ –°–æ–∑–¥–∞—Ç—å –º–µ–º–æ—Ä–∏–∞–ª –∑–∞ 0.01 SOL'))
      
      await waitFor(() => {
        expect(mockWallet.sendTransaction).toHaveBeenCalled()
        expect(global.fetch).toHaveBeenCalledWith('/api/grave/mint-memorial', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: 'Test Memorial',
            message: 'Test message',
            owner: mockWallet.publicKey.toString()
          })
        })
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è –º–µ–º–æ—Ä–∏–∞–ª–∞', () => {
      const { NFTMemorialMint } = require('@/components/nft/nft-memorial-mint')
      
      render(
        <WalletProvider>
          <NFTMemorialMint />
        </WalletProvider>
      )
      
      const button = screen.getByText('ü™¶ –°–æ–∑–¥–∞—Ç—å –º–µ–º–æ—Ä–∏–∞–ª –∑–∞ 0.01 SOL')
      expect(button).toBeDisabled()
      
      // –¢–æ–ª—å–∫–æ –∏–º—è
      fireEvent.change(screen.getByPlaceholderText('–ò–º—è –¥–ª—è –º–µ–º–æ—Ä–∏–∞–ª–∞'), {
        target: { value: 'Test' }
      })
      expect(button).toBeDisabled()
      
      // –ò–º—è + —Å–æ–æ–±—â–µ–Ω–∏–µ
      fireEvent.change(screen.getByPlaceholderText('–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–∞–º—è—Ç—å...'), {
        target: { value: 'Message' }
      })
      expect(button).not.toBeDisabled()
    })
  })

  describe('‚≠ê TELEGRAM STARS', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Stars –ø–ª–∞—Ç–µ–∂', async () => {
      const { StarsPayment } = await import('@/components/telegram/stars-payment')
      
      // Mock Telegram WebApp
      global.window.Telegram = {
        WebApp: {
          showInvoice: jest.fn((invoice, callback) => {
            callback('paid')
          })
        }
      }
      
      const onSuccess = jest.fn()
      global.alert = jest.fn()
      
      render(
        <StarsPayment 
          amount={100} 
          description="Test payment" 
          onSuccess={onSuccess} 
        />
      )
      
      fireEvent.click(screen.getByText('‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å 100 Stars'))
      
      await waitFor(() => {
        expect(global.window.Telegram.WebApp.showInvoice).toHaveBeenCalledWith({
          title: 'NORMAL DANCE',
          description: 'Test payment',
          payload: JSON.stringify({ type: 'stars', amount: 100 }),
          provider_token: '',
          start_parameter: 'stars_payment',
          currency: 'XTR',
          prices: [{ label: 'Test payment', amount: 100 }]
        }, expect.any(Function))
        expect(onSuccess).toHaveBeenCalled()
        expect(global.alert).toHaveBeenCalledWith('–û–ø–ª–∞—Ç–∞ Stars –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ –≤ Telegram', () => {
      const { StarsPayment } = require('@/components/telegram/stars-payment')
      
      delete global.window.Telegram
      global.alert = jest.fn()
      
      render(<StarsPayment amount={100} description="Test" />)
      
      fireEvent.click(screen.getByText('‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å 100 Stars'))
      
      expect(global.alert).toHaveBeenCalledWith('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Telegram Mini App')
    })
  })

  describe('üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å wallet –∞–¥—Ä–µ—Å–∞', () => {
      const validAddress = '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'
      const invalidAddress = 'invalid'
      
      expect(() => new PublicKey(validAddress)).not.toThrow()
      expect(() => new PublicKey(invalidAddress)).toThrow()
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞', () => {
      render(
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test Artist" />
        </WalletProvider>
      )
      
      // –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω - –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
      expect(screen.getByText('üíù –î–æ–Ω–∞—Ç')).not.toBeDisabled()
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–≤–æ–π–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', async () => {
      mockWallet.sendTransaction.mockImplementation(() => 
        new Promise(resolve => setTimeout(() => resolve('success'), 1000))
      )
      
      render(
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test Artist" />
        </WalletProvider>
      )
      
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL'), { 
        target: { value: '1' } 
      })
      
      const button = screen.getByText('–î–æ–Ω–∞—Ç 1 SOL')
      fireEvent.click(button)
      
      // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      expect(button).toBeDisabled()
      expect(screen.getByText('–û—Ç–ø—Ä–∞–≤–∫–∞...')).toBeInTheDocument()
    })
  })

  describe('üìä –ú–ï–¢–†–ò–ö–ò –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã', async () => {
      mockWallet.sendTransaction.mockResolvedValue('tx_hash_123')
      const mockAnalytics = jest.fn()
      global.gtag = mockAnalytics
      
      render(
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test Artist" />
        </WalletProvider>
      )
      
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL'), { 
        target: { value: '5' } 
      })
      fireEvent.click(screen.getByText('–î–æ–Ω–∞—Ç 5 SOL'))
      
      await waitFor(() => {
        expect(mockAnalytics).toHaveBeenCalledWith('event', 'donation_success', {
          artist: 'Test Artist',
          amount: 5,
          currency: 'SOL'
        })
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—à–∏–±–∫–∏', async () => {
      mockWallet.sendTransaction.mockRejectedValue(new Error('Network error'))
      const mockAnalytics = jest.fn()
      global.gtag = mockAnalytics
      
      render(
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test Artist" />
        </WalletProvider>
      )
      
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL'), { 
        target: { value: '1' } 
      })
      fireEvent.click(screen.getByText('–î–æ–Ω–∞—Ç 1 SOL'))
      
      await waitFor(() => {
        expect(mockAnalytics).toHaveBeenCalledWith('event', 'donation_error', {
          error: 'Network error',
          artist: 'Test Artist'
        })
      })
    })
  })

  describe('üöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨', () => {
    test('–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ', () => {
      const start = performance.now()
      
      render(
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test Artist" />
        </WalletProvider>
      )
      
      const end = performance.now()
      expect(end - start).toBeLessThan(100) // < 100ms
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ-—Ä–µ–Ω–¥–µ—Ä—ã', () => {
      const renderCount = jest.fn()
      
      const TestComponent = () => {
        renderCount()
        return <DonateButton artistWallet="test" artistName="Test Artist" />
      }
      
      const { rerender } = render(
        <WalletProvider>
          <TestComponent />
        </WalletProvider>
      )
      
      rerender(
        <WalletProvider>
          <TestComponent />
        </WalletProvider>
      )
      
      expect(renderCount).toHaveBeenCalledTimes(2)
    })
  })
})