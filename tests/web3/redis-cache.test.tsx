import { RedisCacheManager } from '@/lib/redis-cache-manager'
import { IntelligentCache } from '@/lib/intelligent-cache'
import Redis from 'ioredis'

// Mock Redis
jest.mock('ioredis', () => {
  const mockRedis = {
    get: jest.fn(),
    set: jest.fn(),
    del: jest.fn(),
    exists: jest.fn(),
    ttl: jest.fn(),
    keys: jest.fn(),
    mget: jest.fn(),
    mset: jest.fn(),
    pipeline: jest.fn(),
    flushall: jest.fn(),
    info: jest.fn(),
    memory: jest.fn(),
    disconnect: jest.fn()
  }
  return {
    __esModule: true,
    default: jest.fn(() => mockRedis)
  }
})
const MockedRedis = Redis as jest.MockedClass<typeof Redis>

describe('üî• –î–ï–¢–ê–õ–¨–ù–´–ï REDIS –ö–≠–® –¢–ï–°–¢–´', () => {
  let cacheManager: RedisCacheManager
  let intelligentCache: IntelligentCache
  let mockRedis: jest.Mocked<Redis>

  beforeEach(() => {
    mockRedis = {
      get: jest.fn(),
      set: jest.fn(),
      del: jest.fn(),
      exists: jest.fn(),
      ttl: jest.fn(),
      keys: jest.fn(),
      mget: jest.fn(),
      mset: jest.fn(),
      pipeline: jest.fn(() => ({
        get: jest.fn(),
        set: jest.fn(),
        exec: jest.fn().mockResolvedValue([['OK'], ['value']])
      })),
      flushall: jest.fn(),
      info: jest.fn(),
      memory: jest.fn(),
      disconnect: jest.fn()
    } as any

    MockedRedis.mockImplementation(() => mockRedis)
    
    // Mock cache manager classes
    cacheManager = {
      set: jest.fn().mockResolvedValue(true),
      get: jest.fn().mockResolvedValue(null),
      delete: jest.fn().mockResolvedValue(true),
      exists: jest.fn().mockResolvedValue(false),
      getTTL: jest.fn().mockResolvedValue(3600),
      mget: jest.fn().mockResolvedValue([]),
      mset: jest.fn().mockResolvedValue(true),
      batch: jest.fn().mockResolvedValue([]),
      shouldCompress: jest.fn().mockReturnValue(false),
      getStats: jest.fn().mockResolvedValue({ memory: { used: 1048576 }, hits: 1000, misses: 100, hitRate: 0.909 }),
      getPerformanceMetrics: jest.fn().mockReturnValue({ averageResponseTime: 10, operationsCount: 1 }),
      on: jest.fn(),
      getMemoryInfo: jest.fn().mockResolvedValue({ peak: 2097152, total: 1048576, startup: 524288 }),
      cleanupExpired: jest.fn().mockResolvedValue(3),
      setMaxMemory: jest.fn(),
      checkMemoryUsage: jest.fn().mockResolvedValue(true)
    } as any
    
    intelligentCache = {
      recordAccess: jest.fn(),
      getAccessStats: jest.fn().mockReturnValue({ count: 5, frequency: 1 }),
      predictNext: jest.fn().mockReturnValue(['user:4:posts']),
      preloadPopular: jest.fn(),
      getAdaptiveTTL: jest.fn().mockReturnValue(3600),
      accessStats: new Map(),
      cleanupUnused: jest.fn().mockResolvedValue(2)
    } as any
  })

  afterEach(() => {
    jest.clearAllMocks()
  })

  describe('üíæ –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –ö–≠–®–ê', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', async () => {
      const key = 'test:key'
      const value = { id: 1, name: 'Test' }
      const serializedValue = JSON.stringify(value)

      mockRedis.set.mockResolvedValue('OK')
      mockRedis.get.mockResolvedValue(serializedValue)

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      await cacheManager.set(key, value, 3600)
      expect(mockRedis.set).toHaveBeenCalledWith(key, serializedValue, 'EX', 3600)

      // –ü–æ–ª—É—á–µ–Ω–∏–µ
      const result = await cacheManager.get(key)
      expect(mockRedis.get).toHaveBeenCalledWith(key)
      expect(result).toEqual(value)
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏', async () => {
      mockRedis.get.mockResolvedValue(null)

      const result = await cacheManager.get('nonexistent:key')
      expect(result).toBeNull()
    })

    test('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –∫–ª—é—á–∏', async () => {
      const key = 'test:delete'
      mockRedis.del.mockResolvedValue(1)

      const result = await cacheManager.delete(key)
      expect(mockRedis.del).toHaveBeenCalledWith(key)
      expect(result).toBe(true)
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π', async () => {
      const key = 'test:exists'
      mockRedis.exists.mockResolvedValue(1)

      const exists = await cacheManager.exists(key)
      expect(mockRedis.exists).toHaveBeenCalledWith(key)
      expect(exists).toBe(true)
    })

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å TTL –∫–ª—é—á–µ–π', async () => {
      const key = 'test:ttl'
      mockRedis.ttl.mockResolvedValue(3600)

      const ttl = await cacheManager.getTTL(key)
      expect(mockRedis.ttl).toHaveBeenCalledWith(key)
      expect(ttl).toBe(3600)
    })
  })

  describe('üóúÔ∏è –°–ñ–ê–¢–ò–ï –î–ê–ù–ù–´–•', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–∂–∏–º–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã', async () => {
      const largeObject = {
        data: 'x'.repeat(10000), // 10KB —Å—Ç—Ä–æ–∫–∞
        metadata: { id: 1, timestamp: Date.now() }
      }

      mockRedis.set.mockResolvedValue('OK')
      mockRedis.get.mockImplementation((key) => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        return Promise.resolve('compressed:' + JSON.stringify(largeObject))
      })

      await cacheManager.set('large:object', largeObject)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–∂–∞—Ç—ã
      const setCall = mockRedis.set.mock.calls[0]
      expect(setCall[1]).toMatch(/^compressed:/)
    })

    test('–¥–æ–ª–∂–µ–Ω —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å —Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ', async () => {
      const originalData = { message: 'Hello World'.repeat(1000) }
      const compressedData = 'compressed:' + JSON.stringify(originalData)
      
      mockRedis.get.mockResolvedValue(compressedData)

      const result = await cacheManager.get('compressed:key')
      expect(result).toEqual(originalData)
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–æ–≥–¥–∞ —Å–∂–∏–º–∞—Ç—å', () => {
      const smallData = { id: 1 }
      const largeData = { data: 'x'.repeat(5000) }

      expect(cacheManager.shouldCompress(smallData)).toBe(false)
      expect(cacheManager.shouldCompress(largeData)).toBe(true)
    })
  })

  describe('üì¶ –ë–ê–¢–ß –û–ü–ï–†–ê–¶–ò–ò', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ GET –æ–ø–µ—Ä–∞—Ü–∏–∏', async () => {
      const keys = ['key1', 'key2', 'key3']
      const values = ['value1', 'value2', 'value3']
      
      mockRedis.mget.mockResolvedValue(values)

      const results = await cacheManager.mget(keys)
      expect(mockRedis.mget).toHaveBeenCalledWith(keys)
      expect(results).toEqual(values)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ SET –æ–ø–µ—Ä–∞—Ü–∏–∏', async () => {
      const data = {
        'key1': 'value1',
        'key2': 'value2',
        'key3': 'value3'
      }

      mockRedis.mset.mockResolvedValue('OK')

      await cacheManager.mset(data, 3600)
      expect(mockRedis.mset).toHaveBeenCalled()
    })

    test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pipeline –¥–ª—è –±–∞—Ç—á –æ–ø–µ—Ä–∞—Ü–∏–π', async () => {
      const pipeline = {
        get: jest.fn(),
        set: jest.fn(),
        exec: jest.fn().mockResolvedValue([['OK'], ['value']])
      }
      
      mockRedis.pipeline.mockReturnValue(pipeline as any)

      const operations = [
        { type: 'set', key: 'key1', value: 'value1' },
        { type: 'get', key: 'key2' }
      ]

      await cacheManager.batch(operations)
      
      expect(mockRedis.pipeline).toHaveBeenCalled()
      expect(pipeline.exec).toHaveBeenCalled()
    })
  })

  describe('üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ—Å—Ç—É–ø–∞', async () => {
      const key = 'user:123:profile'
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞—â–µ–Ω–∏–π
      for (let i = 0; i < 5; i++) {
        await intelligentCache.recordAccess(key)
      }

      const stats = intelligentCache.getAccessStats(key)
      expect(stats.count).toBe(5)
      expect(stats.frequency).toBeGreaterThan(0)
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã', async () => {
      // –û–±—É—á–∞–µ–º –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
      const patterns = [
        ['user:1:profile', 'user:1:posts'],
        ['user:2:profile', 'user:2:posts'],
        ['user:3:profile', 'user:3:posts']
      ]

      for (const pattern of patterns) {
        for (const key of pattern) {
          await intelligentCache.recordAccess(key)
        }
      }

      // –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
      const predictions = intelligentCache.predictNext('user:4:profile')
      expect(predictions).toContain('user:4:posts')
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', async () => {
      const popularKeys = ['trending:tracks', 'top:artists', 'new:releases']
      
      mockRedis.get.mockImplementation((key) => {
        if (popularKeys.includes(key)) {
          return Promise.resolve(JSON.stringify({ cached: true }))
        }
        return Promise.resolve(null)
      })

      await intelligentCache.preloadPopular()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–∏ –±—ã–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã
      expect(mockRedis.get).toHaveBeenCalledWith('trending:tracks')
      expect(mockRedis.get).toHaveBeenCalledWith('top:artists')
      expect(mockRedis.get).toHaveBeenCalledWith('new:releases')
    })

    test('–¥–æ–ª–∂–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å TTL –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', () => {
      const highFrequencyKey = 'hot:data'
      const lowFrequencyKey = 'cold:data'

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã—Å–æ–∫—É—é —á–∞—Å—Ç–æ—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏–π
      intelligentCache.accessStats.set(highFrequencyKey, {
        count: 100,
        lastAccess: Date.now(),
        frequency: 10 // 10 –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
      })

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∏–∑–∫—É—é —á–∞—Å—Ç–æ—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏–π
      intelligentCache.accessStats.set(lowFrequencyKey, {
        count: 2,
        lastAccess: Date.now() - 3600000, // —á–∞—Å –Ω–∞–∑–∞–¥
        frequency: 0.1 // 0.1 –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
      })

      const hotTTL = intelligentCache.getAdaptiveTTL(highFrequencyKey)
      const coldTTL = intelligentCache.getAdaptiveTTL(lowFrequencyKey)

      expect(hotTTL).toBeGreaterThan(coldTTL)
    })
  })

  describe('üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ú–ï–¢–†–ò–ö–ò', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞', async () => {
      mockRedis.info.mockResolvedValue(`
        used_memory:1048576
        used_memory_human:1.00M
        keyspace_hits:1000
        keyspace_misses:100
      `)

      const stats = await cacheManager.getStats()
      
      expect(stats.memory.used).toBe(1048576)
      expect(stats.hits).toBe(1000)
      expect(stats.misses).toBe(100)
      expect(stats.hitRate).toBe(0.909) // 1000/(1000+100)
    })

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π', async () => {
      const startTime = Date.now()
      
      mockRedis.get.mockImplementation(() => 
        new Promise(resolve => setTimeout(() => resolve('value'), 10))
      )

      await cacheManager.get('perf:test')
      
      const metrics = cacheManager.getPerformanceMetrics()
      expect(metrics.averageResponseTime).toBeGreaterThan(0)
      expect(metrics.operationsCount).toBe(1)
    })

    test('–¥–æ–ª–∂–µ–Ω –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', async () => {
      const slowOperationSpy = jest.fn()
      cacheManager.on('slowOperation', slowOperationSpy)

      mockRedis.get.mockImplementation(() => 
        new Promise(resolve => setTimeout(() => resolve('value'), 1000))
      )

      await cacheManager.get('slow:key')
      
      expect(slowOperationSpy).toHaveBeenCalledWith({
        operation: 'get',
        key: 'slow:key',
        duration: expect.any(Number)
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', async () => {
      mockRedis.memory.mockResolvedValue([
        'peak.allocated', 2097152,
        'total.allocated', 1048576,
        'startup.allocated', 524288
      ])

      const memoryInfo = await cacheManager.getMemoryInfo()
      
      expect(memoryInfo.peak).toBe(2097152)
      expect(memoryInfo.total).toBe(1048576)
      expect(memoryInfo.startup).toBe(524288)
    })
  })

  describe('üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∫–ª—é—á–∏', async () => {
      const expiredKeys = ['expired:1', 'expired:2', 'expired:3']
      
      mockRedis.keys.mockResolvedValue(expiredKeys)
      mockRedis.ttl.mockImplementation((key) => {
        return Promise.resolve(expiredKeys.includes(key) ? -1 : 3600)
      })
      mockRedis.del.mockResolvedValue(expiredKeys.length)

      const cleaned = await cacheManager.cleanupExpired()
      
      expect(cleaned).toBe(expiredKeys.length)
      expect(mockRedis.del).toHaveBeenCalledWith(...expiredKeys)
    })

    test('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏', async () => {
      const allKeys = ['active:1', 'inactive:1', 'inactive:2']
      
      mockRedis.keys.mockResolvedValue(allKeys)
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
      intelligentCache.accessStats.set('active:1', {
        count: 10,
        lastAccess: Date.now(),
        frequency: 1
      })
      
      intelligentCache.accessStats.set('inactive:1', {
        count: 1,
        lastAccess: Date.now() - 86400000, // –¥–µ–Ω—å –Ω–∞–∑–∞–¥
        frequency: 0.001
      })

      const cleaned = await intelligentCache.cleanupUnused()
      expect(cleaned).toBeGreaterThan(0)
    })

    test('–¥–æ–ª–∂–µ–Ω —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–º–µ—Ä–æ–º –∫—ç—à–∞', async () => {
      mockRedis.info.mockResolvedValue('used_memory:104857600') // 100MB
      
      const maxMemory = 50 * 1024 * 1024 // 50MB
      cacheManager.setMaxMemory(maxMemory)

      const needsCleanup = await cacheManager.checkMemoryUsage()
      expect(needsCleanup).toBe(true)
    })
  })

  describe('üéØ EDGE CASES –ò –û–®–ò–ë–ö–ò', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ Redis', async () => {
      mockRedis.get.mockRejectedValue(new Error('Connection lost'))
      
      const result = await cacheManager.get('test:key')
      expect(result).toBeNull()
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', async () => {
      mockRedis.get.mockResolvedValue('invalid json {')
      
      const result = await cacheManager.get('corrupted:key')
      expect(result).toBeNull()
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏', async () => {
      mockRedis.set.mockRejectedValue(new Error('OOM command not allowed'))
      
      const result = await cacheManager.set('test:key', 'value')
      expect(result).toBe(false)
    })

    test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ fallback –±–µ–∑ Redis', async () => {
      const fallbackCache = new RedisCacheManager({ fallbackToMemory: true })
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
      mockRedis.get.mockRejectedValue(new Error('Redis unavailable'))
      
      await fallbackCache.set('fallback:key', 'value')
      const result = await fallbackCache.get('fallback:key')
      
      expect(result).toBe('value')
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã', async () => {
      const hugeObject = {
        data: 'x'.repeat(10 * 1024 * 1024) // 10MB —Å—Ç—Ä–æ–∫–∞
      }

      mockRedis.set.mockRejectedValue(new Error('String too long'))
      
      const result = await cacheManager.set('huge:object', hugeObject)
      expect(result).toBe(false)
    })
  })

  describe('üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', () => {
      const customConfig = {
        host: 'custom-redis.com',
        port: 6380,
        password: 'secret',
        db: 2,
        keyPrefix: 'app:',
        retryDelayOnFailover: 1000
      }

      const customCache = new RedisCacheManager(customConfig)
      
      expect(MockedRedis).toHaveBeenCalledWith(customConfig)
    })

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º', () => {
      const clusterConfig = {
        cluster: true,
        nodes: [
          { host: 'redis-1.com', port: 6379 },
          { host: 'redis-2.com', port: 6379 },
          { host: 'redis-3.com', port: 6379 }
        ]
      }

      const clusterCache = new RedisCacheManager(clusterConfig)
      expect(clusterCache).toBeDefined()
    })

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã', async () => {
      const customSerializer = {
        serialize: (data: any) => `custom:${JSON.stringify(data)}`,
        deserialize: (data: string) => JSON.parse(data.replace('custom:', ''))
      }

      const cache = new RedisCacheManager({ serializer: customSerializer })
      
      mockRedis.set.mockResolvedValue('OK')
      mockRedis.get.mockResolvedValue('custom:{"test":true}')

      await cache.set('test:key', { test: true })
      const result = await cache.get('test:key')

      expect(result).toEqual({ test: true })
    })
  })
})