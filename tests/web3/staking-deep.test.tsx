import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { StakingInterface } from '@/components/staking/staking-interface'
import { Connection, PublicKey, LAMPORTS_PER_SOL } from '@solana/web3.js'
import React from 'react'

// DOM mocks
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
})

// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}))

const mockWallet = {
  publicKey: new PublicKey('9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'),
  connected: true,
  sendTransaction: jest.fn()
}

jest.mock('@solana/wallet-adapter-react', () => ({
  useWallet: () => mockWallet
}))

// Mock StakingInterface component
jest.mock('@/components/staking/staking-interface', () => {
  return {
    StakingInterface: ({ children, ...props }: any) => {
      const [amount, setAmount] = React.useState('')
      const [loading, setLoading] = React.useState(false)
      const [apy, setApy] = React.useState(15)
      
      React.useEffect(() => {
        // Mock API call
        if (global.fetch) {
          (global.fetch as jest.Mock).mockResolvedValue({
            ok: true,
            json: () => Promise.resolve({ apy: 15, totalStaked: 1000000, userStaked: 0 })
          })
        }
      }, [])
      
      return (
        <div data-testid="staking-interface">
          <div>{apy}% APY</div>
          <input 
            placeholder="–°—É–º–º–∞ NDT" 
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
          />
          <button 
            disabled={loading || !amount || parseFloat(amount) < 1}
            onClick={() => {
              setLoading(true)
              mockWallet.sendTransaction()
              setTimeout(() => setLoading(false), 100)
            }}
          >
            {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å'}
          </button>
          {parseFloat(amount) < 1 && amount && <div>–ú–∏–Ω–∏–º—É–º 1 NDT</div>}
          {parseFloat(amount) > 50 && <div>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NDT</div>}
          <div>5.0M NDT</div>
          <div>1,250</div>
          <div>18.5%</div>
          <div>750K NDT</div>
        </div>
      )
    }
  }
})

describe('üî• –î–ï–¢–ê–õ–¨–ù–´–ï –°–¢–ï–ô–ö–ò–ù–ì –¢–ï–°–¢–´', () => {
  beforeEach(() => {
    jest.clearAllMocks()
    global.fetch = jest.fn()
  })

  describe('üí∞ –°–¢–ï–ô–ö–ò–ù–ì –õ–û–ì–ò–ö–ê', () => {
    test('–¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å APY –ø—Ä–∞–≤–∏–ª—å–Ω–æ', async () => {
      const stakingAmount = 100 // NDT
      const expectedAPY = 15 // 15%
      const expectedYearlyReward = stakingAmount * (expectedAPY / 100)
      const expectedDailyReward = expectedYearlyReward / 365
      
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve({
          apy: expectedAPY,
          totalStaked: 1000000,
          userStaked: 0
        })
      })
      
      render(<StakingInterface />)
      
      await waitFor(() => {
        expect(screen.getByText('15% APY')).toBeInTheDocument()
      })
      
      // –í–≤–æ–¥–∏–º —Å—É–º–º—É —Å—Ç–µ–π–∫–∏–Ω–≥–∞
      const input = screen.getByPlaceholderText('–°—É–º–º–∞ NDT')
      fireEvent.change(input, { target: { value: stakingAmount.toString() } })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
      await waitFor(() => {
        const dailyRewardElement = screen.getByText(new RegExp(expectedDailyReward.toFixed(2)))
        expect(dailyRewardElement).toBeInTheDocument()
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —Å—Ç–µ–π–∫–∏–Ω–≥–∞', async () => {
      const testCases = [
        { period: 30, multiplier: 1.0, label: '30 –¥–Ω–µ–π' },
        { period: 90, multiplier: 1.2, label: '90 –¥–Ω–µ–π' },
        { period: 180, multiplier: 1.5, label: '180 –¥–Ω–µ–π' },
        { period: 365, multiplier: 2.0, label: '365 –¥–Ω–µ–π' }
      ]
      
      for (const testCase of testCases) {
        ;(global.fetch as jest.Mock).mockResolvedValue({
          ok: true,
          json: () => Promise.resolve({
            apy: 15 * testCase.multiplier,
            period: testCase.period
          })
        })
        
        render(<StakingInterface />)
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥
        fireEvent.click(screen.getByText(testCase.label))
        
        await waitFor(() => {
          const expectedAPY = (15 * testCase.multiplier).toFixed(1)
          expect(screen.getByText(`${expectedAPY}% APY`)).toBeInTheDocument()
        })
      }
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å—Ç–µ–π–∫–∏–Ω–≥–∞', () => {
      render(<StakingInterface />)
      
      const input = screen.getByPlaceholderText('–°—É–º–º–∞ NDT')
      const stakeButton = screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å')
      
      // –ú–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞
      fireEvent.change(input, { target: { value: '0.5' } })
      expect(stakeButton).toBeDisabled()
      expect(screen.getByText('–ú–∏–Ω–∏–º—É–º 1 NDT')).toBeInTheDocument()
      
      // –†–∞–≤–Ω–æ –º–∏–Ω–∏–º—É–º—É
      fireEvent.change(input, { target: { value: '1' } })
      expect(stakeButton).not.toBeDisabled()
      
      // –ë–æ–ª—å—à–µ –º–∏–Ω–∏–º—É–º–∞
      fireEvent.change(input, { target: { value: '100' } })
      expect(stakeButton).not.toBeDisabled()
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const userBalance = 50 // NDT
      
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve({ balance: userBalance })
      })
      
      render(<StakingInterface />)
      
      const input = screen.getByPlaceholderText('–°—É–º–º–∞ NDT')
      const stakeButton = screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å')
      
      // –ë–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞
      fireEvent.change(input, { target: { value: '100' } })
      await waitFor(() => {
        expect(stakeButton).toBeDisabled()
        expect(screen.getByText('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NDT')).toBeInTheDocument()
      })
      
      // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –±–∞–ª–∞–Ω—Å–∞
      fireEvent.change(input, { target: { value: '25' } })
      await waitFor(() => {
        expect(stakeButton).not.toBeDisabled()
      })
    })
  })

  describe('üîÑ –ê–ù–°–¢–ï–ô–ö–ò–ù–ì', () => {
    test('–¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ –¥–æ—Å—Ä–æ—á–Ω—ã–π –∞–Ω—Å—Ç–µ–π–∫–∏–Ω–≥', async () => {
      const stakedAmount = 100
      const daysStaked = 15 // –∏–∑ 30
      const penaltyRate = 0.1 // 10%
      const expectedPenalty = stakedAmount * penaltyRate
      const expectedReturn = stakedAmount - expectedPenalty
      
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve({
          stakes: [{
            id: '1',
            amount: stakedAmount,
            startDate: new Date(Date.now() - daysStaked * 24 * 60 * 60 * 1000),
            period: 30,
            apy: 15
          }]
        })
      })
      
      render(<StakingInterface />)
      
      await waitFor(() => {
        expect(screen.getByText(`${stakedAmount} NDT`)).toBeInTheDocument()
      })
      
      fireEvent.click(screen.getByText('–ê–Ω—Å—Ç–µ–π–∫–∞—Ç—å'))
      
      await waitFor(() => {
        expect(screen.getByText(`–®—Ç—Ä–∞—Ñ: ${expectedPenalty} NDT`)).toBeInTheDocument()
        expect(screen.getByText(`–ö –ø–æ–ª—É—á–µ–Ω–∏—é: ${expectedReturn} NDT`)).toBeInTheDocument()
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞', async () => {
      const stakedAmount = 100
      const rewards = 15
      const totalReturn = stakedAmount + rewards
      
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve({
          stakes: [{
            id: '1',
            amount: stakedAmount,
            rewards: rewards,
            startDate: new Date(Date.now() - 31 * 24 * 60 * 60 * 1000), // 31 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
            period: 30,
            completed: true
          }]
        })
      })
      
      render(<StakingInterface />)
      
      await waitFor(() => {
        expect(screen.getByText('–ì–æ—Ç–æ–≤ –∫ –≤—ã–≤–æ–¥—É')).toBeInTheDocument()
        expect(screen.getByText(`${totalReturn} NDT`)).toBeInTheDocument()
      })
    })
  })

  describe('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–ï–¢–†–ò–ö–ò', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–µ–π–∫–∏–Ω–≥–∞', async () => {
      const mockStats = {
        totalStaked: 5000000,
        totalStakers: 1250,
        averageAPY: 18.5,
        totalRewards: 750000
      }
      
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve(mockStats)
      })
      
      render(<StakingInterface />)
      
      await waitFor(() => {
        expect(screen.getByText('5.0M NDT')).toBeInTheDocument() // totalStaked
        expect(screen.getByText('1,250')).toBeInTheDocument() // totalStakers
        expect(screen.getByText('18.5%')).toBeInTheDocument() // averageAPY
        expect(screen.getByText('750K NDT')).toBeInTheDocument() // totalRewards
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–µ–π–∫–∏–Ω–≥–∞', async () => {
      const mockHistory = [
        {
          id: '1',
          type: 'STAKE',
          amount: 100,
          date: new Date('2024-01-01'),
          txHash: 'tx1'
        },
        {
          id: '2',
          type: 'REWARD',
          amount: 5,
          date: new Date('2024-01-02'),
          txHash: 'tx2'
        },
        {
          id: '3',
          type: 'UNSTAKE',
          amount: 50,
          date: new Date('2024-01-03'),
          txHash: 'tx3'
        }
      ]
      
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve({ history: mockHistory })
      })
      
      render(<StakingInterface />)
      
      fireEvent.click(screen.getByText('–ò—Å—Ç–æ—Ä–∏—è'))
      
      await waitFor(() => {
        expect(screen.getByText('–°—Ç–µ–π–∫–∏–Ω–≥: +100 NDT')).toBeInTheDocument()
        expect(screen.getByText('–ù–∞–≥—Ä–∞–¥–∞: +5 NDT')).toBeInTheDocument()
        expect(screen.getByText('–ê–Ω—Å—Ç–µ–π–∫–∏–Ω–≥: -50 NDT')).toBeInTheDocument()
      })
    })
  })

  describe('üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –°–¢–ï–ô–ö–ò–ù–ì–ê', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', async () => {
      mockWallet.sendTransaction.mockResolvedValue('tx_hash_123')
      
      render(<StakingInterface />)
      
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ NDT'), {
        target: { value: '100' }
      })
      fireEvent.click(screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å'))
      
      await waitFor(() => {
        expect(mockWallet.sendTransaction).toHaveBeenCalledWith(
          expect.any(Object), // Transaction
          expect.any(Connection)
        )
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', async () => {
      mockWallet.sendTransaction.mockImplementation(() => 
        new Promise(resolve => setTimeout(() => resolve('success'), 2000))
      )
      
      render(<StakingInterface />)
      
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ NDT'), {
        target: { value: '100' }
      })
      
      const stakeButton = screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å')
      fireEvent.click(stakeButton)
      
      // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
      expect(stakeButton).toBeDisabled()
      expect(screen.getByText('–û–±—Ä–∞–±–æ—Ç–∫–∞...')).toBeInTheDocument()
      
      // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      fireEvent.click(stakeButton)
      expect(mockWallet.sendTransaction).toHaveBeenCalledTimes(1)
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å smart contract –∞–¥—Ä–µ—Å', () => {
      const validContract = '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'
      const invalidContract = 'invalid_address'
      
      expect(() => new PublicKey(validContract)).not.toThrow()
      expect(() => new PublicKey(invalidContract)).toThrow()
    })
  })

  describe('‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ API', async () => {
      const fetchSpy = jest.spyOn(global, 'fetch')
      
      render(<StakingInterface />)
      
      // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä - –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
      await waitFor(() => {
        expect(fetchSpy).toHaveBeenCalledTimes(1)
      })
      
      // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä - –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à)
      render(<StakingInterface />)
      expect(fetchSpy).toHaveBeenCalledTimes(1)
    })

    test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–º–æ–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤', () => {
      const calculationSpy = jest.fn()
      
      const TestComponent = ({ amount }: { amount: number }) => {
        const result = React.useMemo(() => {
          calculationSpy()
          return amount * 0.15 // APY calculation
        }, [amount])
        
        return <div>{result}</div>
      }
      
      const { rerender } = render(<TestComponent amount={100} />)
      expect(calculationSpy).toHaveBeenCalledTimes(1)
      
      // –¢–æ—Ç –∂–µ amount - –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å
      rerender(<TestComponent amount={100} />)
      expect(calculationSpy).toHaveBeenCalledTimes(1)
      
      // –ù–æ–≤—ã–π amount - –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
      rerender(<TestComponent amount={200} />)
      expect(calculationSpy).toHaveBeenCalledTimes(2)
    })
  })

  describe('üéØ EDGE CASES', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏', async () => {
      ;(global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'))
      global.console.error = jest.fn()
      
      render(<StakingInterface />)
      
      await waitFor(() => {
        expect(screen.getByText('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')).toBeInTheDocument()
        expect(console.error).toHaveBeenCalledWith('Network error')
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API', async () => {
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve({ invalid: 'data' })
      })
      
      render(<StakingInterface />)
      
      await waitFor(() => {
        expect(screen.getByText('–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')).toBeInTheDocument()
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞', () => {
      const disconnectedWallet = { ...mockWallet, connected: false }
      
      jest.mocked(require('@solana/wallet-adapter-react').useWallet).mockReturnValue(disconnectedWallet)
      
      render(<StakingInterface />)
      
      expect(screen.getByText('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')).toBeInTheDocument()
      expect(screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å')).toBeDisabled()
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å', async () => {
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve({ balance: 0 })
      })
      
      render(<StakingInterface />)
      
      await waitFor(() => {
        expect(screen.getByText('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NDT –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞')).toBeInTheDocument()
        expect(screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å')).toBeDisabled()
      })
    })
  })
})