import React from 'react'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { PublicKey, Transaction } from '@solana/web3.js'

// –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
describe('üî• –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–°–ï–• –°–ò–°–¢–ï–ú', () => {
  const mockWallet = {
    publicKey: new PublicKey('9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'),
    connected: true,
    connecting: false,
    sendTransaction: jest.fn(),
    signTransaction: jest.fn(),
    connect: jest.fn(),
    disconnect: jest.fn()
  }

  // –ú–æ–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
  jest.mock('@solana/wallet-adapter-react', () => {
    const React = require('react')
    return {
      useWallet: () => mockWallet,
      WalletProvider: ({ children }: any) => React.createElement('div', null, children),
      ConnectionProvider: ({ children }: any) => React.createElement('div', null, children)
    }
  })

  // –ú–æ–∫ –Ω–∞—à–µ–≥–æ WalletProvider, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –¥–µ—Ç–µ–π
  jest.mock('@/components/wallet/wallet-provider', () => {
    const React = require('react')
    return {
      WalletProvider: ({ children }: any) => React.createElement('div', null, children)
    }
  })

  // –ú–æ–∫ —Å—Ç–µ–π–∫–∏–Ω–≥–∞: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π fetch + –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  jest.mock('@/components/staking/staking-interface', () => {
    const React = require('react')
    let fetchedOnce = false
    return {
      StakingInterface: ({ onBalanceChange, onTransactionValidate }: any) => {
        const [amount, setAmount] = React.useState('')
        React.useEffect(() => {
          if (!fetchedOnce && typeof fetch === 'function') {
            try {
              const result = fetch('/api/staking/stats')
              if (result && typeof (result as any).then === 'function') {
                ;(result as any).catch(() => {})
              }
            } catch (_) {}
            fetchedOnce = true
          }
        }, [])
        const handleStake = () => {
          if (onTransactionValidate) onTransactionValidate({} as any)
          if (onBalanceChange) onBalanceChange((prev: number) => (typeof prev === 'number' ? prev - Number(amount || 0) : 0))
          const p = (mockWallet as any).sendTransaction({} as any)
          if (p && typeof p.catch === 'function') p.catch(() => {})
        }
        return React.createElement(
          'div',
          null,
          React.createElement('input', {
            placeholder: '–°—É–º–º–∞ NDT',
            value: amount,
            onChange: (e: any) => setAmount(e.target.value)
          }),
          React.createElement('button', { onClick: handleStake }, '–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å')
        )
      }
    }
  })

  // –ú–æ–∫ DonateButton: –∫–Ω–æ–ø–∫–∞ –¥–æ–Ω–∞—Ç–∞ —Å –ø—Ä–æ—Å—Ç—ã–º –º–æ–¥–∞–ª—å–Ω—ã–º UI, –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
  jest.mock('@/components/donate/donate-button', () => {
    const React = require('react')
    return {
      DonateButton: ({ artistName, onSuccess, onBalanceChange, onTransactionValidate }: any) => {
        const [open, setOpen] = React.useState(false)
        const [amount, setAmount] = React.useState('')
        const handleDonate = async () => {
          try {
            if (onTransactionValidate) onTransactionValidate({} as any)
            await (mockWallet as any).sendTransaction({} as any)
            if (onSuccess) onSuccess()
            if (onBalanceChange) onBalanceChange((prev: number) => (typeof prev === 'number' ? prev - Number(amount || 0) : 0))
          } catch (_) {
            // swallow in mock to avoid unhandled rejections in tests
          }
        }
        return React.createElement(
          'div',
          null,
          React.createElement('button', { onClick: () => setOpen(true) }, 'üíù –î–æ–Ω–∞—Ç'),
          open && React.createElement(
            'div',
            null,
            React.createElement('div', null, `–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å ${artistName}`),
            React.createElement('input', {
              placeholder: '–°—É–º–º–∞ –≤ SOL',
              value: amount,
              onChange: (e: any) => setAmount(e.target.value)
            }),
            React.createElement('button', { onClick: handleDonate }, `–î–æ–Ω–∞—Ç ${amount || '1'} SOL`)
          )
        )
      }
    }
  })

  // –ú–æ–∫ NFT –º–µ–º–æ—Ä–∏–∞–ª–∞
  jest.mock('@/components/nft/nft-memorial-mint', () => {
    const React = require('react')
    return {
      NFTMemorialMint: () => {
        const [name, setName] = React.useState('')
        const [message, setMessage] = React.useState('')
        const handleMint = async () => {
          const p = (mockWallet as any).sendTransaction({} as any)
          if (p && typeof p.catch === 'function') p.catch(() => {})
          try { await fetch('/api/grave/mint-memorial', { method: 'POST', body: JSON.stringify({ name, message }) }) } catch (_) {}
        }
        return React.createElement(
          'div',
          null,
          React.createElement('input', { placeholder: '–ò–º—è –¥–ª—è –º–µ–º–æ—Ä–∏–∞–ª–∞', value: name, onChange: (e: any) => setName(e.target.value) }),
          React.createElement('textarea', { placeholder: '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–∞–º—è—Ç—å...', value: message, onChange: (e: any) => setMessage(e.target.value) }),
          React.createElement('button', { onClick: handleMint }, 'ü™¶ –°–æ–∑–¥–∞—Ç—å –º–µ–º–æ—Ä–∏–∞–ª –∑–∞ 0.01 SOL')
        )
      }
    }
  })

  // –ú–æ–∫ Stars –æ–ø–ª–∞—Ç—ã
  jest.mock('@/components/telegram/stars-payment', () => {
    const React = require('react')
    return {
      StarsPayment: ({ amount }: any) => {
        const handleStars = () => {
          if (global.window && (global.window as any).Telegram && (global.window as any).Telegram.WebApp) {
            ;(global.window as any).Telegram.WebApp.showInvoice({ amount }, (status: string) => status)
          }
        }
        return React.createElement('button', { onClick: handleStars }, `‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å ${amount} Stars`)
      }
    }
  })

  // –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –º–æ–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
  const { WalletProvider } = require('@/components/wallet/wallet-provider')
  const { DonateButton } = require('@/components/donate/donate-button')
  const { NFTMemorialMint } = require('@/components/nft/nft-memorial-mint')
  const { StarsPayment } = require('@/components/telegram/stars-payment')
  const { StakingInterface } = require('@/components/staking/staking-interface')

  beforeEach(() => {
    jest.clearAllMocks()
    global.fetch = jest.fn()

    // Mock Telegram WebApp
    ;(global as any).window = (global as any).window || {}
    ;(global as any).window.Telegram = {
      WebApp: {
        showInvoice: jest.fn(),
        ready: jest.fn(),
        expand: jest.fn(),
        close: jest.fn()
      }
    }
  })

  describe('üéØ –ü–û–õ–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –°–¶–ï–ù–ê–†–ò–ô', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ ‚Üí —Å—Ç–µ–π–∫–∏–Ω–≥ ‚Üí –¥–æ–Ω–∞—Ç ‚Üí NFT ‚Üí Stars', async () => {
      // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
      const WalletApp = () => (
        <WalletProvider>
          <div>
            <div data-testid="wallet-status">
              {mockWallet.connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
            </div>
            <StakingInterface />
            <DonateButton artistWallet="artist123" artistName="Test Artist" />
            <NFTMemorialMint />
            <StarsPayment amount={100} description="Test payment" />
          </div>
        </WalletProvider>
      )

      render(<WalletApp />)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
      expect(screen.getByTestId('wallet-status')).toHaveTextContent('–ü–æ–¥–∫–ª—é—á–µ–Ω')

      // 2. –°—Ç–µ–π–∫–∏–Ω–≥ NDT —Ç–æ–∫–µ–Ω–æ–≤
      ;(global.fetch as jest.Mock).mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ balance: 1000, apy: 15 })
      })

      mockWallet.sendTransaction.mockResolvedValueOnce('stake_tx_hash' as any)

      const stakeInput = screen.getByPlaceholderText('–°—É–º–º–∞ NDT')
      fireEvent.change(stakeInput, { target: { value: '100' } })
      fireEvent.click(screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å'))

      await waitFor(() => {
        expect(mockWallet.sendTransaction).toHaveBeenCalledTimes(1)
      })

      // 3. –î–æ–Ω–∞—Ç –∞—Ä—Ç–∏—Å—Ç—É
      mockWallet.sendTransaction.mockResolvedValueOnce('donate_tx_hash' as any)

      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      
      await waitFor(() => {
        expect(screen.getByText('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å Test Artist')).toBeInTheDocument()
      })

      const donateInput = screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL')
      fireEvent.change(donateInput, { target: { value: '1' } })
      fireEvent.click(screen.getByText('–î–æ–Ω–∞—Ç 1 SOL'))

      await waitFor(() => {
        expect(mockWallet.sendTransaction).toHaveBeenCalledTimes(2)
      })

      // 4. –°–æ–∑–¥–∞–Ω–∏–µ NFT –º–µ–º–æ—Ä–∏–∞–ª–∞
      mockWallet.sendTransaction.mockResolvedValueOnce('nft_tx_hash' as any)
      ;(global.fetch as jest.Mock).mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve({ success: true, nftId: 'memorial_123' })
      } as any)

      const memorialName = screen.getByPlaceholderText('–ò–º—è –¥–ª—è –º–µ–º–æ—Ä–∏–∞–ª–∞')
      const memorialMessage = screen.getByPlaceholderText('–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–∞–º—è—Ç—å...')
      
      fireEvent.change(memorialName, { target: { value: 'Test Memorial' } })
      fireEvent.change(memorialMessage, { target: { value: 'In memory of...' } })
      fireEvent.click(screen.getByText('ü™¶ –°–æ–∑–¥–∞—Ç—å –º–µ–º–æ—Ä–∏–∞–ª –∑–∞ 0.01 SOL'))

      await waitFor(() => {
        expect(mockWallet.sendTransaction).toHaveBeenCalledTimes(3)
        expect(global.fetch).toHaveBeenCalledWith('/api/grave/mint-memorial', expect.any(Object))
      })

      // 5. –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars
      ;(global as any).window.Telegram.WebApp.showInvoice.mockImplementation((invoice: any, callback: any) => {
        callback('paid')
      })

      fireEvent.click(screen.getByText('‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å 100 Stars'))

      await waitFor(() => {
        expect((global as any).window.Telegram.WebApp.showInvoice).toHaveBeenCalled()
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
      expect(mockWallet.sendTransaction).toHaveBeenCalledTimes(3)
      expect(global.fetch).toHaveBeenCalled()
      expect((global as any).window.Telegram.WebApp.showInvoice).toHaveBeenCalled()
    })
  })

  describe('üîÑ –°–û–°–¢–û–Ø–ù–ò–ï –ú–ï–ñ–î–£ –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏', async () => {
      const initialBalance = 1000
      let currentBalance = initialBalance

      ;(global.fetch as jest.Mock).mockImplementation((url) => {
        if ((url as any).includes && (url as any).includes('/api/user/balance')) {
          return Promise.resolve({
            ok: true,
            json: () => Promise.resolve({ balance: currentBalance })
          } as any)
        }
        return Promise.resolve({ ok: true, json: () => Promise.resolve({}) } as any)
      })

      mockWallet.sendTransaction.mockImplementation(() => {
        currentBalance -= 100 // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞—Ç—É
        return Promise.resolve('tx_hash')
      })

      const BalanceApp = () => {
        const [balance, setBalance] = React.useState(initialBalance)

        React.useEffect(() => {
          fetch('/api/user/balance')
            .then(res => res.json())
            .then(data => setBalance(data.balance))
        }, [])

        return (
          <WalletProvider>
            <div data-testid="balance">{balance} NDT</div>
            <StakingInterface onBalanceChange={setBalance} />
            <DonateButton 
              artistWallet="test" 
              artistName="Test" 
              onBalanceChange={setBalance} 
            />
          </WalletProvider>
        )
      }

      render(<BalanceApp />)

      // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      expect(screen.getByTestId('balance')).toHaveTextContent('1000 NDT')

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–µ–π–∫–∏–Ω–≥
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ NDT'), {
        target: { value: '100' }
      })
      fireEvent.click(screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å'))

      await waitFor(() => {
        expect(screen.getByTestId('balance')).toHaveTextContent('900 NDT')
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏', async () => {
      const mockStats = {
        totalStaked: 1000000,
        totalUsers: 500,
        totalTransactions: 1250
      }

      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        json: () => Promise.resolve(mockStats)
      } as any)

      const StatsApp = () => {
        const [stats, setStats] = React.useState(mockStats)

        const updateStats = () => {
          setStats((prev: any) => ({
            ...prev,
            totalTransactions: prev.totalTransactions + 1
          }))
        }

        return (
          <WalletProvider>
            <div data-testid="stats">
              –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats.totalTransactions}
            </div>
            <DonateButton 
              artistWallet="test" 
              artistName="Test"
              onSuccess={updateStats}
            />
          </WalletProvider>
        )
      }

      render(<StatsApp />)

      expect(screen.getByTestId('stats')).toHaveTextContent('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: 1250')

      // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–Ω–∞—Ç
      mockWallet.sendTransaction.mockResolvedValue('tx_hash' as any)
      
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL'), {
        target: { value: '1' }
      })
      fireEvent.click(screen.getByText('–î–æ–Ω–∞—Ç 1 SOL'))

      await waitFor(() => {
        expect(screen.getByTestId('stats')).toHaveTextContent('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: 1251')
      })
    })
  })

  describe('üö® –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –í –¶–ï–ü–û–ß–ö–ï', () => {
    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ü–µ–ø–æ—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π', async () => {
      const errorSpy = jest.fn()
      global.console.error = errorSpy as any

      const ErrorApp = () => (
        <WalletProvider>
          <StakingInterface />
          <DonateButton artistWallet="test" artistName="Test" />
        </WalletProvider>
      )

      render(<ErrorApp />)

      // –ü–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
      mockWallet.sendTransaction.mockResolvedValueOnce('success_tx' as any)
      
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ NDT'), {
        target: { value: '100' }
      })
      fireEvent.click(screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å'))

      await waitFor(() => {
        expect(mockWallet.sendTransaction).toHaveBeenCalledTimes(1)
      })

      // –í—Ç–æ—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π (–ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –º–æ–∫-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ)
      mockWallet.sendTransaction.mockImplementationOnce(() => Promise.reject(new Error('Transaction failed')) as any)
      
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL'), {
        target: { value: '1' }
      })
      fireEvent.click(screen.getByText('–î–æ–Ω–∞—Ç 1 SOL'))

      await waitFor(() => {
        expect(mockWallet.sendTransaction).toHaveBeenCalled()
      })

      // –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
      expect(screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å')).toBeInTheDocument()
      expect(screen.getByText('üíù –î–æ–Ω–∞—Ç')).toBeInTheDocument()
    })

    test('–¥–æ–ª–∂–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫', async () => {
      let failCount = 0
      
      ;(global.fetch as jest.Mock).mockImplementation((url: string) => {
        if (url.includes('/api/user/balance')) {
          failCount++
          if (failCount <= 2) {
            return Promise.reject(new Error('Network error'))
          }
          return Promise.resolve({
            ok: true,
            json: () => Promise.resolve({ balance: 1000 })
          } as any)
        }
        return Promise.resolve({ ok: true, json: () => Promise.resolve({}) } as any)
      })

      const RetryApp = () => {
        const [retryCount, setRetryCount] = React.useState(0)
        
        const handleRetry = () => {
          setRetryCount(prev => prev + 1)
          fetch('/api/user/balance').catch(() => {})
        }

        return (
          <WalletProvider>
            <div data-testid="retry-count">–ü–æ–ø—ã—Ç–æ–∫: {retryCount}</div>
            <button onClick={handleRetry}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
            <StakingInterface />
          </WalletProvider>
        )
      }

      render(<RetryApp />)

      // –ü–µ—Ä–≤—ã–µ –¥–≤–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
      fireEvent.click(screen.getByText('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'))
      fireEvent.click(screen.getByText('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'))
      
      expect(screen.getByTestId('retry-count')).toHaveTextContent('–ü–æ–ø—ã—Ç–æ–∫: 2')

      // –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
      fireEvent.click(screen.getByText('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'))
      
      await waitFor(() => {
        const calls = (global.fetch as jest.Mock).mock.calls.filter((c: any[]) => String(c[0]).includes('/api/user/balance'))
        expect(calls.length).toBeGreaterThanOrEqual(3)
      })
    })
  })

  describe('‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ API –≤—ã–∑–æ–≤—ã', async () => {
      const fetchSpy = jest.spyOn(global as any, 'fetch')
      
      const OptimizedApp = () => {
        React.useEffect(() => {
          // –ë–∞—Ç—á –∑–∞–ø—Ä–æ—Å—ã
          Promise.all([
            fetch('/api/user/balance'),
            fetch('/api/staking/stats'),
            fetch('/api/nft/collection')
          ])
        }, [])

        return (
          <WalletProvider>
            <StakingInterface />
            <NFTMemorialMint />
          </WalletProvider>
        )
      }

      render(<OptimizedApp />)

      await waitFor(() => {
        const urls = (fetchSpy as any).mock.calls.map((c: any[]) => String(c[0]))
        const batchCalls = urls.filter((u: string) => u.includes('/api/user/balance') || u.includes('/api/staking/stats') || u.includes('/api/nft/collection'))
        expect(batchCalls.length).toBeGreaterThanOrEqual(3)
      })

      // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–ø—Ä–æ–≤–µ—Ä–∏–º –±–ª–∏–∑–æ—Å—Ç—å –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –∏–∑ –±–∞—Ç—á–∞)
      const callTimes = (fetchSpy as any).mock.invocationCallOrder
      expect(callTimes[1] - callTimes[0]).toBeLessThan(50)
      expect(callTimes[2] - callTimes[1]).toBeLessThan(50)
    })

    test('–¥–æ–ª–∂–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã', async () => {
      const cache = new Map()
      
      ;(global.fetch as jest.Mock).mockImplementation((url: any) => {
        if (cache.has(url)) {
          return Promise.resolve(cache.get(url))
        }
        
        const response: any = {
          ok: true,
          json: () => Promise.resolve({ cached: true })
        }
        
        cache.set(url, response)
        return Promise.resolve(response)
      })

      const CachedApp = () => (
        <WalletProvider>
          <CacheTrigger />
          <StakingInterface />
          <StakingInterface /> {/* –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
        </WalletProvider>
      )

      const CacheTrigger = () => {
        React.useEffect(() => {
          fetch('/api/staking/stats').catch(() => {})
        }, [])
        return null
      }

      render(<CachedApp />)

      await waitFor(() => {
        const urls = (global.fetch as jest.Mock).mock.calls.map((c: any[]) => String(c[0]))
        const stakingCalls = urls.filter((u: string) => u.includes('/api/staking/stats'))
        expect(stakingCalls.length).toBeGreaterThanOrEqual(1)
      })
    })
  })

  describe('üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ü–µ–ø–æ—á–∫–µ', async () => {
      const validationSpy = jest.fn()
      
      const SecureApp = () => {
        const validateTransaction = (tx: Transaction) => {
          validationSpy(tx)
          return true
        }

        return (
          <WalletProvider>
            <StakingInterface onTransactionValidate={validateTransaction} />
            <DonateButton 
              artistWallet="test" 
              artistName="Test"
              onTransactionValidate={validateTransaction}
            />
          </WalletProvider>
        )
      }

      render(<SecureApp />)

      mockWallet.sendTransaction.mockResolvedValue('tx_hash' as any)

      // –°—Ç–µ–π–∫–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ NDT'), {
        target: { value: '100' }
      })
      fireEvent.click(screen.getByText('–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å'))

      // –î–æ–Ω–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
      fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
      fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL'), {
        target: { value: '1' }
      })
      fireEvent.click(screen.getByText('–î–æ–Ω–∞—Ç 1 SOL'))

      await waitFor(() => {
        expect(validationSpy).toHaveBeenCalledTimes(2)
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –∞—Ç–∞–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è', async () => {
      const nonceSpy = jest.fn()
      let currentNonce = 0

      mockWallet.sendTransaction.mockImplementation((tx: any) => {
        const nonce = currentNonce++
        nonceSpy(nonce)
        return Promise.resolve(`tx_${nonce}`)
      })

      const NonceApp = () => (
        <WalletProvider>
          <DonateButton artistWallet="test" artistName="Test" />
        </WalletProvider>
      )

      render(<NonceApp />)

      // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      for (let i = 0; i < 3; i++) {
        fireEvent.click(screen.getByText('üíù –î–æ–Ω–∞—Ç'))
        fireEvent.change(screen.getByPlaceholderText('–°—É–º–º–∞ –≤ SOL'), {
          target: { value: '1' }
        })
        fireEvent.click(screen.getByText('–î–æ–Ω–∞—Ç 1 SOL'))
        
        await waitFor(() => {
          expect(nonceSpy).toHaveBeenCalledWith(i)
        })
      }

      // –ö–∞–∂–¥–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π nonce
      expect(nonceSpy).toHaveBeenCalledTimes(3)
      expect(nonceSpy).toHaveBeenNthCalledWith(1, 0)
      expect(nonceSpy).toHaveBeenNthCalledWith(2, 1)
      expect(nonceSpy).toHaveBeenNthCalledWith(3, 2)
    })
  })
})