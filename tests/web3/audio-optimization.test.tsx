import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { AudioOptimizer } from '@/lib/audio-optimizer'
import { useOptimizedAudio } from '@/hooks/useOptimizedAudio'
import { WebAudioPlayer } from '@/components/audio/web-audio-player'

// Mock Web Audio API
const mockAudioContext = {
  createBufferSource: jest.fn(() => ({
    connect: jest.fn(),
    start: jest.fn(),
    stop: jest.fn(),
    buffer: null
  })),
  createGain: jest.fn(() => ({
    connect: jest.fn(),
    gain: { value: 1 }
  })),
  createAnalyser: jest.fn(() => ({
    connect: jest.fn(),
    fftSize: 2048,
    getByteFrequencyData: jest.fn()
  })),
  decodeAudioData: jest.fn(),
  destination: {},
  sampleRate: 44100,
  state: 'running'
}

global.AudioContext = jest.fn(() => mockAudioContext)
global.webkitAudioContext = jest.fn(() => mockAudioContext)

describe('üî• –î–ï–¢–ê–õ–¨–ù–´–ï –ê–£–î–ò–û –¢–ï–°–¢–´', () => {
  let audioOptimizer: AudioOptimizer

  beforeEach(() => {
    jest.clearAllMocks()
    audioOptimizer = new AudioOptimizer()
    global.fetch = jest.fn()
    global.navigator.connection = {
      effectiveType: '4g',
      downlink: 10,
      rtt: 50
    }
  })

  describe('üéµ –ê–£–î–ò–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ —Å–µ—Ç–∏', () => {
      // 4G - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      global.navigator.connection.effectiveType = '4g'
      global.navigator.connection.downlink = 10
      expect(audioOptimizer.getOptimalQuality()).toBe('high')

      // 3G - —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ  
      global.navigator.connection.effectiveType = '3g'
      global.navigator.connection.downlink = 2
      expect(audioOptimizer.getOptimalQuality()).toBe('medium')

      // 2G - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      global.navigator.connection.effectiveType = '2g'
      global.navigator.connection.downlink = 0.5
      expect(audioOptimizer.getOptimalQuality()).toBe('low')
    })

    test('–¥–æ–ª–∂–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ç—Ä–µ–π—Ç –ø–æ–¥ —É—Å–ª–æ–≤–∏—è —Å–µ—Ç–∏', () => {
      const testCases = [
        { connection: '4g', downlink: 10, expected: 320 },
        { connection: '3g', downlink: 2, expected: 192 },
        { connection: '2g', downlink: 0.5, expected: 128 }
      ]

      testCases.forEach(({ connection, downlink, expected }) => {
        global.navigator.connection.effectiveType = connection
        global.navigator.connection.downlink = downlink
        
        expect(audioOptimizer.getOptimalBitrate()).toBe(expected)
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã', async () => {
      const mockAudioData = new ArrayBuffer(1024)
      const trackId = 'track_123'
      
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        arrayBuffer: () => Promise.resolve(mockAudioData)
      })

      // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      const audio1 = await audioOptimizer.loadAudio(trackId, 'high')
      expect(global.fetch).toHaveBeenCalledTimes(1)

      // –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –∏–∑ –∫—ç—à–∞
      const audio2 = await audioOptimizer.loadAudio(trackId, 'high')
      expect(global.fetch).toHaveBeenCalledTimes(1)
      expect(audio1).toBe(audio2)
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏', async () => {
      const playlist = ['track1', 'track2', 'track3']
      const currentIndex = 0

      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        arrayBuffer: () => Promise.resolve(new ArrayBuffer(1024))
      })

      await audioOptimizer.preloadNext(playlist, currentIndex)

      // –î–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      expect(global.fetch).toHaveBeenCalledWith(
        expect.stringContaining('track2')
      )
    })

    test('–¥–æ–ª–∂–µ–Ω —Å–∂–∏–º–∞—Ç—å –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Web Worker', async () => {
      const mockWorker = {
        postMessage: jest.fn(),
        onmessage: null,
        terminate: jest.fn()
      }

      global.Worker = jest.fn(() => mockWorker)

      const audioData = new ArrayBuffer(2048)
      const compressionPromise = audioOptimizer.compressAudio(audioData, 0.8)

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç worker
      setTimeout(() => {
        mockWorker.onmessage({ 
          data: { 
            compressed: new ArrayBuffer(1024) 
          } 
        })
      }, 10)

      const compressed = await compressionPromise
      expect(compressed.byteLength).toBeLessThan(audioData.byteLength)
      expect(mockWorker.postMessage).toHaveBeenCalledWith({
        audioData,
        quality: 0.8
      })
    })
  })

  describe('üéõÔ∏è WEB AUDIO PLAYER', () => {
    test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç', () => {
      render(<WebAudioPlayer src="test.mp3" />)
      expect(global.AudioContext).toHaveBeenCalled()
    })

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã', async () => {
      const { container } = render(
        <WebAudioPlayer 
          src="test.mp3" 
          effects={{ reverb: 0.5, bass: 0.3 }} 
        />
      )

      await waitFor(() => {
        expect(mockAudioContext.createGain).toHaveBeenCalled()
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é', async () => {
      render(
        <WebAudioPlayer 
          src="test.mp3" 
          showVisualizer={true} 
        />
      )

      await waitFor(() => {
        expect(mockAudioContext.createAnalyser).toHaveBeenCalled()
        expect(screen.getByTestId('audio-visualizer')).toBeInTheDocument()
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å', () => {
      render(<WebAudioPlayer src="test.mp3" />)
      
      const volumeSlider = screen.getByRole('slider', { name: /–≥—Ä–æ–º–∫–æ—Å—Ç—å/i })
      fireEvent.change(volumeSlider, { target: { value: '0.5' } })
      
      expect(mockAudioContext.createGain().gain.value).toBe(0.5)
    })
  })

  describe('üéß –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –•–£–ö', () => {
    const TestComponent = ({ trackId }: { trackId: string }) => {
      const { 
        audio, 
        loading, 
        error, 
        play, 
        pause, 
        isPlaying,
        currentTime,
        duration 
      } = useOptimizedAudio(trackId)

      return (
        <div>
          {loading && <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
          {error && <div>–û—à–∏–±–∫–∞: {error}</div>}
          {audio && (
            <>
              <button onClick={play}>Play</button>
              <button onClick={pause}>Pause</button>
              <div>Playing: {isPlaying ? 'Yes' : 'No'}</div>
              <div>Time: {currentTime}/{duration}</div>
            </>
          )}
        </div>
      )
    }

    test('–¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞—É–¥–∏–æ', async () => {
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        arrayBuffer: () => Promise.resolve(new ArrayBuffer(1024))
      })

      render(<TestComponent trackId="test_track" />)

      expect(screen.getByText('–ó–∞–≥—Ä—É–∑–∫–∞...')).toBeInTheDocument()

      await waitFor(() => {
        expect(screen.getByText('Play')).toBeInTheDocument()
        expect(screen.getByText('Pause')).toBeInTheDocument()
      })
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏', async () => {
      ;(global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'))

      render(<TestComponent trackId="test_track" />)

      await waitFor(() => {
        expect(screen.getByText('–û—à–∏–±–∫–∞: Network error')).toBeInTheDocument()
      })
    })

    test('–¥–æ–ª–∂–µ–Ω —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º', async () => {
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        arrayBuffer: () => Promise.resolve(new ArrayBuffer(1024))
      })

      render(<TestComponent trackId="test_track" />)

      await waitFor(() => {
        expect(screen.getByText('Play')).toBeInTheDocument()
      })

      fireEvent.click(screen.getByText('Play'))
      expect(screen.getByText('Playing: Yes')).toBeInTheDocument()

      fireEvent.click(screen.getByText('Pause'))
      expect(screen.getByText('Playing: No')).toBeInTheDocument()
    })
  })

  describe('üìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏', async () => {
      const startTime = performance.now()
      
      ;(global.fetch as jest.Mock).mockImplementation(() => 
        new Promise(resolve => 
          setTimeout(() => resolve({
            ok: true,
            arrayBuffer: () => Promise.resolve(new ArrayBuffer(1024))
          }), 100)
        )
      )

      await audioOptimizer.loadAudio('test_track', 'high')
      
      const loadTime = performance.now() - startTime
      expect(loadTime).toBeGreaterThan(100)
      expect(loadTime).toBeLessThan(200)
    })

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞', async () => {
      const trackId = 'cache_test'
      
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        arrayBuffer: () => Promise.resolve(new ArrayBuffer(1024))
      })

      // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      await audioOptimizer.loadAudio(trackId, 'high')
      const cacheStats1 = audioOptimizer.getCacheStats()
      expect(cacheStats1.misses).toBe(1)
      expect(cacheStats1.hits).toBe(0)

      // –í—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–∏–∑ –∫—ç—à–∞)
      await audioOptimizer.loadAudio(trackId, 'high')
      const cacheStats2 = audioOptimizer.getCacheStats()
      expect(cacheStats2.misses).toBe(1)
      expect(cacheStats2.hits).toBe(1)
    })

    test('–¥–æ–ª–∂–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', () => {
      const memoryBefore = audioOptimizer.getMemoryUsage()
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
      audioOptimizer.cache.set('test1', new ArrayBuffer(1024))
      audioOptimizer.cache.set('test2', new ArrayBuffer(2048))
      
      const memoryAfter = audioOptimizer.getMemoryUsage()
      expect(memoryAfter).toBeGreaterThan(memoryBefore)
      expect(memoryAfter).toBe(memoryBefore + 3072) // 1024 + 2048
    })
  })

  describe('üîß –ê–î–ê–ü–¢–ò–í–ù–û–ï –ö–ê–ß–ï–°–¢–í–û', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ—Ç–∏', async () => {
      const qualityChangeSpy = jest.fn()
      audioOptimizer.on('qualityChange', qualityChangeSpy)

      // –ù–∞—á–∏–Ω–∞–µ–º —Å 4G
      global.navigator.connection.effectiveType = '4g'
      await audioOptimizer.adaptToNetwork()
      expect(qualityChangeSpy).toHaveBeenCalledWith('high')

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ 3G
      global.navigator.connection.effectiveType = '3g'
      await audioOptimizer.adaptToNetwork()
      expect(qualityChangeSpy).toHaveBeenCalledWith('medium')

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ 2G
      global.navigator.connection.effectiveType = '2g'
      await audioOptimizer.adaptToNetwork()
      expect(qualityChangeSpy).toHaveBeenCalledWith('low')
    })

    test('–¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏', () => {
      // –í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - —Å–Ω–∏–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
      global.navigator.connection.rtt = 500
      expect(audioOptimizer.getOptimalQuality()).toBe('low')

      // –ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
      global.navigator.connection.rtt = 50
      expect(audioOptimizer.getOptimalQuality()).toBe('high')
    })

    test('–¥–æ–ª–∂–µ–Ω –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏', async () => {
      global.navigator.connection.effectiveType = '2g'
      global.navigator.connection.downlink = 0.3

      const bufferSpy = jest.fn()
      audioOptimizer.on('bufferStart', bufferSpy)

      await audioOptimizer.loadAudio('slow_track', 'high')
      expect(bufferSpy).toHaveBeenCalled()
    })
  })

  describe('üéØ EDGE CASES', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Web Audio API', () => {
      delete global.AudioContext
      delete global.webkitAudioContext

      expect(() => {
        render(<WebAudioPlayer src="test.mp3" />)
      }).not.toThrow()

      expect(screen.getByText('Web Audio –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')).toBeInTheDocument()
    })

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã', async () => {
      ;(global.fetch as jest.Mock).mockResolvedValue({
        ok: true,
        arrayBuffer: () => Promise.resolve(new ArrayBuffer(0)) // –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª
      })

      mockAudioContext.decodeAudioData.mockRejectedValue(new Error('Invalid audio'))

      await expect(
        audioOptimizer.loadAudio('corrupted_track', 'high')
      ).rejects.toThrow('Invalid audio')
    })

    test('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å –∫—ç—à –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏', () => {
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à
      for (let i = 0; i < 100; i++) {
        audioOptimizer.cache.set(`track_${i}`, new ArrayBuffer(1024 * 1024)) // 1MB –∫–∞–∂–¥—ã–π
      }

      const memoryBefore = audioOptimizer.getMemoryUsage()
      audioOptimizer.cleanupCache()
      const memoryAfter = audioOptimizer.getMemoryUsage()

      expect(memoryAfter).toBeLessThan(memoryBefore)
    })

    test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ navigator.connection', () => {
      delete global.navigator.connection

      // –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      expect(audioOptimizer.getOptimalQuality()).toBe('medium')
      expect(audioOptimizer.getOptimalBitrate()).toBe(192)
    })
  })
})