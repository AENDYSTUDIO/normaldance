// This is your Prisma schema file for NORMAL DANCE Music Platform
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db/production.db"
}

// User model for artists and listeners
model User {
  id          String      @id @default(cuid())
  email       String      @unique
  username    String      @unique
  displayName String?
  bio         String?
  avatar      String?
  banner      String?
  wallet      String?     // Web3 wallet address
  level       UserLevel   @default(BRONZE)
  balance     Float       @default(0) // $NDT token balance
  tonBalance  Float       @default(0) // TON balance
  isArtist    Boolean     @default(false)
  isActive    Boolean     @default(true)
  role        UserRole   @default(LISTENER)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  tracks      Track[]
  playlists   Playlist[]
  likes       Like[]
  comments    Comment[]
  rewards     Reward[]
  follows     Follow[]    @relation("UserFollowing")
  followedBy  Follow[]    @relation("UserFollowers")
  playHistory PlayHistory[]
  nfts        NFT[]
  purchases   Purchase[]
  stakes      Stake[]
  pushSubscriptions PushSubscription[]
  progressContributions ProgressContribution[]
  notifications Notification[]
  clubMemberships ClubMember[]
  foundedClubs Club[] @relation("ClubFounder")
  tournamentParticipations ClubTournamentParticipant[]
  chatMessages ChatMessage[]
  chatVotes ChatVote[]
  chatReports ChatReport[]
  createdPolls Poll[]
  pollVotes PollVote[]
  swapTransactions SwapTransaction[]
  liquidityPositions LiquidityPosition[]
  liquidityTransactions LiquidityTransaction[]
  nftPasses NFTPass[]
  passPurchases PassPurchase[]
  playbackSessions PlaybackSession[]
  balanceChanges BalanceChange[]
  
  @@map("users")
}

// Track model for music files
model Track {
  id          String   @id @default(cuid())
  title       String
  artistName  String   // Artist name as string
  genre       String
  duration    Int      // Duration in seconds
  playCount   Int      @default(0)
  likeCount   Int      @default(0)
  ipfsHash    String   // IPFS hash for audio file
  metadata    Json     // Additional metadata (BPM, key, etc.)
  price       Float?   // Price in $NDT (null = free)
  isExplicit  Boolean  @default(false)
  isPublished Boolean  @default(false)
  status      TrackStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Secret Progress Bar fields
  progressTarget        Float    @default(1000) // Hidden target amount in T1 tokens
  progressCurrent       Float    @default(0)    // Current progress amount
  progressContributors  Int      @default(0)    // Number of contributors
  progressPhase         String   @default("Искры") // Current phase name
  progressStartTime     DateTime?
  progressEndTime       DateTime?
  isProgressComplete    Boolean  @default(false)
  
  // Relations
  artistId    String
  artist      User     @relation(fields: [artistId], references: [id], onDelete: Cascade)
  
  likes       Like[]
  comments    Comment[]
  playlistTracks PlaylistTrack[]
  playHistory PlayHistory[]
  nfts        NFT[]
  progressContributions ProgressContribution[]
  
  @@map("tracks")
}

// Playlist model for user playlists
model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  coverImage  String?
  playCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tracks      PlaylistTrack[]
  
  @@map("playlists")
}

// Junction table for many-to-many relationship between playlists and tracks
model PlaylistTrack {
  id        String @id @default(cuid())
  position  Int    // Order in playlist
  
  playlistId String
  playlist  Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@unique([playlistId, trackId])
  @@map("playlist_tracks")
}

// Like model for track likes
model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  trackId String
  track   Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@unique([userId, trackId])
  @@map("likes")
}

// Comment model for track comments
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  trackId String
  track   Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

// Reward model for user rewards and earnings
model Reward {
  id        String      @id @default(cuid())
  type      RewardType
  amount    Decimal     @db.Decimal(10,2)
  reason    String?
  createdAt DateTime    @default(now())
  
  // Relations
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("rewards")
}

// Follow model for user relationships
model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // Relations
  followerId  String
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  
  followingId String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@map("follows")
}

// Play history model for tracking user listens
model PlayHistory {
  id          String   @id @default(cuid())
  duration    Int      // Listen duration in seconds
  completed   Boolean  @default(false) // Did user finish the track?
  createdAt   DateTime @default(now())
  
  // Relations
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  trackId String
  track   Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@map("play_history")
}

// NFT model for music NFTs
model NFT {
  id          String      @id @default(cuid())
  tokenId     String      @unique // Solana token ID
  name        String
  description String?
  imageUrl    String?
  metadata    Json        // NFT metadata
  price       Decimal?    @db.Decimal(10,2) // Price in $NDT
  status      NFTStatus   @default(MINTED)
  type        NFTType     @default(TRACK)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  trackId     String?
  track       Track?      @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  purchases   Purchase[]
  
  @@map("nfts")
}

// Purchase model for NFT purchases
model Purchase {
  id          String   @id @default(cuid())
  price       Decimal  @db.Decimal(10,2) // Purchase price in $NDT
  transaction String   // Blockchain transaction hash
  createdAt   DateTime @default(now())
  
  // Relations
  buyerId String
  buyer   User     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  
  nftId   String
  nft     NFT      @relation(fields: [nftId], references: [id], onDelete: Cascade)
  
  @@unique([buyerId, nftId])
  @@map("purchases")
}

// Stake model for token staking
model Stake {
  id          String      @id @default(cuid())
  amount      Decimal     @db.Decimal(10,2) // Amount of NDT tokens staked
  rewardRate  Float       // Annual percentage rate (APR)
  earned      Decimal     @default(0) @db.Decimal(10,2) // Earned rewards
  status      StakeStatus @default(ACTIVE)
  startDate   DateTime    @default(now())
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tokenId String
  token   Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  
  @@map("stakes")
}

// Push Notification Subscription model
model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

// Token model for different token types
model Token {
  id          String     @id @default(cuid())
  symbol      String     @unique
  name        String
  decimals    Int        @default(9)
  totalSupply Float      @default(0)
  type        TokenType  @default(NDT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  stakes Stake[]
  
  @@map("tokens")
}

// Enums
enum UserLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum UserRole {
  LISTENER
  ARTIST
  CURATOR
  ADMIN
}

enum RewardType {
  LISTENING     // Rewards for listening to tracks
  UPLOAD        // Rewards for uploading tracks
  LIKE          // Rewards for liking tracks
  COMMENT       // Rewards for commenting
  REFERRAL      // Rewards for referring users
  DAILY_BONUS   // Daily login bonuses
  PLAYLIST      // Rewards for creating playlists
  FOLLOW        // Rewards for following artists
  CONTRIBUTION  // Rewards for contributing to progress
  COMPLETION_BONUS // Bonus rewards when progress completes
  CLUB_JOIN     // Rewards for joining a club
  CLUB_LEAVE    // Refund when leaving a club
  CLUB_ACHIEVEMENT // Rewards for club achievements
  TOURNAMENT_WIN // Rewards for winning tournaments
  CHAT_MESSAGE  // Refund for chat messages (if no complaints)
  SPAM_REPORT_REWARD // Reward for reporting spam
  TRACK_BOOST   // Reward for boosting track
  CLUB_FUND     // Reward for funding club
  PASS_PURCHASE // Reward for NFT pass purchase
}

enum NFTStatus {
  LISTED
  SOLD
  MINTED
  TRANSFERRED
}

enum NFTType {
  TRACK
  ALBUM
  PLAYLIST
  ARTIST
}

enum StakeStatus {
  ACTIVE
  WITHDRAWN
  PENDING
}

enum TokenType {
  NDT // Normal Dance Token
  TRACK_NFT
}

enum TrackStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Progress Contribution model for secret progress bar
model ProgressContribution {
  id        String   @id @default(cuid())
  amount    Float    // Amount contributed in T1 tokens
  createdAt DateTime @default(now())
  
  // Relations
  trackId String
  track   Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("progress_contributions")
}

// Notification model for user notifications
model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  data      Json?    // Additional data for the notification
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum NotificationType {
  PROGRESS_COMPLETE
  REWARD_EARNED
  TRACK_PUBLISHED
  FOLLOW_NOTIFICATION
  COMMENT_NOTIFICATION
  LIKE_NOTIFICATION
  CLUB_JOIN
  CLUB_LEAVE
  CLUB_ACHIEVEMENT
  CLUB_TOURNAMENT
}

// Club model for NFT-based music clubs
model Club {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String
  imageUrl          String?
  reputation        Float    @default(0) // Club Reputation Token (CRT)
  memberCount       Int      @default(0)
  totalPrizePool    Float    @default(0)
  monthlyPrizePool  Float    @default(0)
  boostMultiplier   Float    @default(0.15) // +15% to votes
  royaltyMultiplier Float    @default(0.05) // +5% from prize pool
  obligationRate    Float    @default(0.20) // 20% back to club
  price             Float    // T1 tokens to join
  maxMembers        Int      @default(100)
  isActive          Boolean  @default(true)
  foundedAt         DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  founderId         String
  founder           User     @relation("ClubFounder", fields: [founderId], references: [id])
  
  members           ClubMember[]
  achievements      ClubAchievement[]
  recentWinners     ClubWinner[]
  tournaments       ClubTournament[]
  
  @@map("clubs")
}

// Club Member model for NFT membership
model ClubMember {
  id          String   @id @default(cuid())
  nftBalance  Int      @default(1) // Number of Club-NFTs owned
  totalEarnings Float  @default(0)
  monthlyEarnings Float @default(0)
  achievements Int     @default(0)
  joinedAt    DateTime @default(now())
  leftAt      DateTime?
  isActive    Boolean  @default(true)
  
  // Relations
  clubId      String
  club        Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([clubId, userId])
  @@map("club_members")
}

// Club Achievement model for medals and trophies
model ClubAchievement {
  id              String   @id @default(cuid())
  type            AchievementType
  title           String
  description     String
  earnedAt        DateTime @default(now())
  artist          String
  event           String
  reputationBonus Float    // CRT bonus
  
  // Relations
  clubId          String
  club            Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  @@map("club_achievements")
}

// Club Winner model for recent victories
model ClubWinner {
  id        String   @id @default(cuid())
  artist    String
  track     String
  position  Int
  prize     Float
  event     String
  date      DateTime @default(now())
  
  // Relations
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  @@map("club_winners")
}

// Club Tournament model for internal competitions
model ClubTournament {
  id          String   @id @default(cuid())
  name        String
  description String
  entryFee    Float    // T1 tokens
  prizePool   Float
  startDate   DateTime
  endDate     DateTime
  status      TournamentStatus @default(UPCOMING)
  winnerId    String?
  createdAt   DateTime @default(now())
  
  // Relations
  clubId      String
  club        Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  participants ClubTournamentParticipant[]
  
  @@map("club_tournaments")
}

// Club Tournament Participant model
model ClubTournamentParticipant {
  id            String   @id @default(cuid())
  joinedAt      DateTime @default(now())
  score         Float    @default(0)
  position      Int?
  
  // Relations
  tournamentId  String
  tournament    ClubTournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tournamentId, userId])
  @@map("club_tournament_participants")
}

enum AchievementType {
  GOLD
  SILVER
  BRONZE
  SPECIAL
}

enum TournamentStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

// Chat Message model for chat matrix
model ChatMessage {
  id          String   @id @default(cuid())
  content     String
  type        ChatMessageType @default(MESSAGE)
  cost        Float    @default(0.001) // T1 cost for sending
  role        String   @default("voter") // User role in chat
  metadata    Json?    // Additional data (trackId, amount, etc.)
  reactions   Json?    // Message reactions
  isPinned    Boolean  @default(false)
  isModerated Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  chatType    String   // 'genre', 'club', 'country'
  
  votes       ChatVote[]
  reports     ChatReport[]
  
  @@map("chat_messages")
}

// Chat Vote model for on-chain voting
model ChatVote {
  id        String   @id @default(cuid())
  voteType  String   // 'approve', 'reject', 'boost', 'fund', etc.
  metadata  Json?    // Additional vote data
  createdAt DateTime @default(now())
  
  // Relations
  messageId String
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@map("chat_votes")
}

// Chat Report model for spam reporting
model ChatReport {
  id        String   @id @default(cuid())
  reason    String
  status    ReportStatus @default(PENDING)
  createdAt DateTime @default(now())
  
  // Relations
  messageId String
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  reporterId String
  reporter   User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, reporterId])
  @@map("chat_reports")
}

// Poll model for chat polls
model Poll {
  id          String   @id @default(cuid())
  question    String
  options     Json     // Array of poll options
  endTime     DateTime
  cost        Float    @default(0.1) // 0.1 T1 to create poll
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  // Relations
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  votes       PollVote[]
  
  @@map("polls")
}

// Poll Vote model
model PollVote {
  id        String   @id @default(cuid())
  option    String   // Selected option
  createdAt DateTime @default(now())
  
  // Relations
  pollId    String
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([pollId, userId])
  @@map("poll_votes")
}

enum ChatMessageType {
  MESSAGE
  VOTE
  POLL
  SYSTEM
  BOT
  FUND
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

// Liquidity Pool model for DEX
model LiquidityPool {
  id            String   @id @default(cuid())
  pair          String   @unique // 'TON-NDT'
  tonReserve    Float    @default(0)
  ndtReserve    Float    @default(0)
  totalLiquidity Float   @default(0)
  totalFees     Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  positions     LiquidityPosition[]
  transactions  LiquidityTransaction[]
  
  @@map("liquidity_pools")
}

// Liquidity Position model
model LiquidityPosition {
  id        String   @id @default(cuid())
  tonAmount Float    @default(0)
  ndtAmount Float    @default(0)
  lpTokens  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  poolId    String
  pool      LiquidityPool @relation(fields: [poolId], references: [id], onDelete: Cascade)
  
  transactions LiquidityTransaction[]
  
  @@unique([userId, poolId])
  @@map("liquidity_positions")
}

// Swap Transaction model
model SwapTransaction {
  id           String   @id @default(cuid())
  from         String   // 'TON' or 'NDT'
  to           String   // 'TON' or 'NDT'
  inputAmount  Float
  outputAmount Float
  rate         Float
  fee          Float
  slippage     Float    @default(0.5)
  status       SwapStatus @default(PENDING)
  createdAt    DateTime @default(now())
  
  // Relations
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("swap_transactions")
}

// Liquidity Transaction model
model LiquidityTransaction {
  id        String   @id @default(cuid())
  type      LiquidityType // 'ADD' or 'REMOVE'
  tonAmount Float
  ndtAmount Float
  lpTokens  Float
  status    LiquidityStatus @default(PENDING)
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  poolId    String
  pool      LiquidityPool @relation(fields: [poolId], references: [id], onDelete: Cascade)
  
  positionId String
  position  LiquidityPosition @relation(fields: [positionId], references: [id], onDelete: Cascade)
  
  @@map("liquidity_transactions")
}

// Stability Reserve model for volatility protection
model StabilityReserve {
  id       String @id @default(cuid())
  balance  Float  @default(0)
  currency String @default("TON")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("stability_reserves")
}

enum SwapStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum LiquidityType {
  ADD
  REMOVE
}

enum LiquidityStatus {
  PENDING
  COMPLETED
  FAILED
}

// NFT Pass Template model
model NFTPassTemplate {
  id          String   @id @default(cuid())
  type        PassType
  name        String
  price       Float
  duration    Int      // in hours
  description String
  benefits    Json     // Array of benefits
  icon        String   @default("🎵")
  color       String   @default("text-blue-400")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  purchases   PassPurchase[]
  
  @@map("nft_pass_templates")
}

// NFT Pass model
model NFTPass {
  id          String   @id @default(cuid())
  type        PassType
  name        String
  price       Float
  duration    Int      // in hours
  description String
  benefits    Json     // Array of benefits
  icon        String   @default("🎵")
  color       String   @default("text-blue-400")
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  metadata    Json?    // Additional data (deviceId, walletAddress, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  purchases   PassPurchase[]
  
  @@map("nft_passes")
}

// Pass Purchase model
model PassPurchase {
  id            String   @id @default(cuid())
  price         Float
  deviceId      String
  walletAddress String
  status        PurchaseStatus @default(PENDING)
  createdAt     DateTime @default(now())
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  passId        String
  pass          NFTPass  @relation(fields: [passId], references: [id], onDelete: Cascade)
  
  templateId    String
  template      NFTPassTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@map("pass_purchases")
}

// Playback Session model
model PlaybackSession {
  id            String   @id @default(cuid())
  trackId       String
  deviceId      String
  walletAddress String
  startTime     DateTime
  pausedTime    DateTime?
  endTime       DateTime?
  isFree        Boolean  @default(true)
  isBackground  Boolean  @default(false)
  isOffline     Boolean  @default(false)
  hasLicense    Boolean  @default(false)
  isActive      Boolean  @default(true)
  metadata      Json?    // Additional session data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("playback_sessions")
}

enum PassType {
  DAY
  TRACK
  CLUB
  GENRE
  OLYMPIC
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// Balance Change model for unified system
model BalanceChange {
  id              String   @id @default(cuid())
  currency        String   // 'NDT' or 'TON'
  amount          Float    // Change amount (positive or negative)
  operation       String   // 'set', 'add', 'subtract'
  previousBalance Float
  newBalance      Float
  reason          String
  createdAt       DateTime @default(now())
  
  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("balance_changes")
}