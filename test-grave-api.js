#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç G.rave API
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –¥–µ–Ω–µ–≥
 */

const http = require('http');

async function testGraveAPI() {
  console.log('ü™¶ G.rave - –¢–µ—Å—Ç API –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–µ–Ω–µ–≥');
  console.log('=====================================');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthResponse = await makeRequest('GET', '/api/health');
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthResponse.status);
    
    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–æ—Ä–∏–∞–ª–∞
    console.log('2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–æ—Ä–∏–∞–ª–∞...');
    const memorialData = {
      artistName: 'DJ Test Eternal',
      ipfsHash: 'QmTestMemorial123',
      heirs: ['0x1234567890abcdef1234567890abcdef12345678'],
      message: '–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ–º–æ—Ä–∏–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥!'
    };
    
    const createResponse = await makeRequest('POST', '/api/grave/memorials', memorialData);
    if (createResponse.success) {
      console.log('‚úÖ –ú–µ–º–æ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω:', createResponse.data.artistName);
      console.log('   ID:', createResponse.data.id);
      console.log('   –ù–∞—Å–ª–µ–¥–Ω–∏–∫–∏:', createResponse.data.heirs.length);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–æ—Ä–∏–∞–ª–∞:', createResponse.error);
    }
    
    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–æ—Ä–∏–∞–ª–æ–≤
    console.log('3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–æ—Ä–∏–∞–ª–æ–≤...');
    const memorialsResponse = await makeRequest('GET', '/api/grave/memorials');
    if (memorialsResponse.success) {
      console.log('‚úÖ –ú–µ–º–æ—Ä–∏–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', memorialsResponse.data.memorials.length);
      memorialsResponse.data.memorials.forEach((memorial, index) => {
        console.log(`   ${index + 1}. ${memorial.artistName} - ${memorial.fundBalance} ETH`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–º–æ—Ä–∏–∞–ª–æ–≤:', memorialsResponse.error);
    }
    
    // –¢–µ—Å—Ç 4: –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è...');
    const donationData = {
      memorialId: '1',
      amount: 0.01,
      message: '–ü–µ—Ä–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –º—É–∑—ã–∫—É! üéµ'
    };
    
    const donationResponse = await makeRequest('POST', '/api/grave/donations', donationData);
    if (donationResponse.success) {
      console.log('‚úÖ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', donationResponse.data.amount, 'ETH');
      console.log('   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', donationResponse.data.transactionHash);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:', donationResponse.error);
    }
    
    console.log('');
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
    console.log('========================');
    console.log('‚úÖ G.rave API —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ú–µ–º–æ—Ä–∏–∞–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è');
    console.log('‚úÖ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è');
    console.log('');
    console.log('üöÄ –ì–û–¢–û–í–û –ö –ü–û–õ–£–ß–ï–ù–ò–Æ –ü–ï–†–í–´–• –î–ï–ù–ï–ì!');
    console.log('   –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/grave');
    console.log('   –°–æ–∑–¥–∞–π—Ç–µ –º–µ–º–æ—Ä–∏–∞–ª –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–∏–¥–∂–µ—è');
    console.log('   –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

function makeRequest(method, path, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json'
      }
    };
    
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(body);
          resolve(jsonData);
        } catch (e) {
          resolve({ success: false, error: 'Invalid JSON response', body: body });
        }
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testGraveAPI();
}

module.exports = { testGraveAPI };
