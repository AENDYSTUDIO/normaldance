import { PublicKey, Transaction, Connection } from '@solana/web3.js'
import { logger } from './logger'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—É–¥–∏—Ç–∞
interface SecurityAuditResult {
  passed: boolean
  issues: SecurityIssue[]
  score: number
  recommendations: string[]
}

interface SecurityIssue {
  severity: 'low' | 'medium' | 'high' | 'critical'
  type: string
  description: string
  location?: string
  fix?: string
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
export function auditPrivateKeyHandling(): SecurityIssue[] {
  const issues: SecurityIssue[] = []
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –∫–æ–¥–µ
  const codeContent = process.env.NODE_ENV === 'development' ? 'check-enabled' : 'production'
  
  if (process.env.PRIVATE_KEY && process.env.NODE_ENV === 'production') {
    issues.push({
      severity: 'critical',
      type: 'private_key_exposure',
      description: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞',
      fix: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª—é—á–µ–π (AWS KMS, HashiCorp Vault)'
    })
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  if (typeof window !== 'undefined' && (window as any).solana) {
    const wallet = (window as any).solana
    if (!wallet.isPhantom && !wallet.isSolflare) {
      issues.push({
        severity: 'medium',
        type: 'unknown_wallet',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫',
        fix: '–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤'
      })
    }
  }
  
  return issues
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export function validateTransactionParams(
  transaction: Transaction,
  expectedRecipient?: string,
  maxAmount?: number
): SecurityIssue[] {
  const issues: SecurityIssue[] = []
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π
    if (transaction.signatures.length === 0) {
      issues.push({
        severity: 'high',
        type: 'unsigned_transaction',
        description: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞',
        fix: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π'
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    if (transaction.instructions.length === 0) {
      issues.push({
        severity: 'medium',
        type: 'empty_transaction',
        description: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
        fix: '–î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if (expectedRecipient) {
      try {
        new PublicKey(expectedRecipient)
      } catch {
        issues.push({
          severity: 'high',
          type: 'invalid_recipient',
          description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
          fix: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è'
        })
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (–±–∞–∑–æ–≤–∞—è)
    transaction.instructions.forEach((instruction, index) => {
      if (instruction.data.length > 1024) {
        issues.push({
          severity: 'medium',
          type: 'large_instruction_data',
          description: `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ${index} —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö`,
          location: `instruction[${index}]`,
          fix: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ç–∞–∫–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö'
        })
      }
    })
    
  } catch (error) {
    issues.push({
      severity: 'critical',
      type: 'transaction_validation_error',
      description: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error}`,
      fix: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
    })
  }
  
  return issues
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ silent-fail –≤ –∫–æ—à–µ–ª—å–∫–µ
export function auditWalletErrorHandling(): SecurityIssue[] {
  const issues: SecurityIssue[] = []
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
  const hasGlobalErrorHandler = typeof window !== 'undefined' && 
    (window.onerror || window.addEventListener)
  
  if (!hasGlobalErrorHandler) {
    issues.push({
      severity: 'medium',
      type: 'missing_error_handler',
      description: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫',
      fix: '–î–æ–±–∞–≤—å—Ç–µ window.onerror –∏–ª–∏ addEventListener –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫'
    })
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∫–æ—à–µ–ª—å–∫–∞
  if (typeof console.error === 'undefined') {
    issues.push({
      severity: 'low',
      type: 'missing_error_logging',
      description: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫',
      fix: '–î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫'
    })
  }
  
  return issues
}

// –ê—É–¥–∏—Ç RPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
export function auditRPCConnections(connection: Connection): SecurityIssue[] {
  const issues: SecurityIssue[] = []
  
  const endpoint = connection.rpcEndpoint
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
  if (!endpoint.startsWith('https://')) {
    issues.push({
      severity: 'high',
      type: 'insecure_rpc',
      description: 'RPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS',
      location: endpoint,
      fix: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS endpoints –¥–ª—è RPC'
    })
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö endpoints
  const unsafeEndpoints = [
    'http://localhost',
    'http://127.0.0.1',
    'ws://'
  ]
  
  if (process.env.NODE_ENV === 'production') {
    unsafeEndpoints.forEach(unsafe => {
      if (endpoint.includes(unsafe)) {
        issues.push({
          severity: 'critical',
          type: 'unsafe_rpc_endpoint',
          description: `–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π RPC endpoint –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: ${unsafe}`,
          location: endpoint,
          fix: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ RPC endpoints –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ'
        })
      }
    })
  }
  
  return issues
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
export function auditRateLimiting(): SecurityIssue[] {
  const issues: SecurityIssue[] = []
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è rate limiting –¥–ª—è API
  const hasRateLimit = process.env.RATE_LIMIT_ENABLED === 'true'
  
  if (!hasRateLimit && process.env.NODE_ENV === 'production') {
    issues.push({
      severity: 'medium',
      type: 'missing_rate_limit',
      description: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç rate limiting –¥–ª—è API',
      fix: '–î–æ–±–∞–≤—å—Ç–µ rate limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π'
    })
  }
  
  return issues
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É–¥–∏—Ç–∞
export async function performSecurityAudit(
  connection?: Connection,
  transaction?: Transaction
): Promise<SecurityAuditResult> {
  const allIssues: SecurityIssue[] = []
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  allIssues.push(...auditPrivateKeyHandling())
  allIssues.push(...auditWalletErrorHandling())
  allIssues.push(...auditRateLimiting())
  
  if (connection) {
    allIssues.push(...auditRPCConnections(connection))
  }
  
  if (transaction) {
    allIssues.push(...validateTransactionParams(transaction))
  }
  
  // –ü–æ–¥—Å—á–µ—Ç score
  const severityWeights = { low: 1, medium: 3, high: 7, critical: 15 }
  const totalWeight = allIssues.reduce((sum, issue) => sum + severityWeights[issue.severity], 0)
  const maxPossibleWeight = 100 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–µ—Å
  const score = Math.max(0, 100 - (totalWeight / maxPossibleWeight) * 100)
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const recommendations: string[] = []
  
  if (allIssues.some(i => i.severity === 'critical')) {
    recommendations.push('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
  }
  
  if (allIssues.some(i => i.type === 'private_key_exposure')) {
    recommendations.push('üîê –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ')
  }
  
  if (allIssues.some(i => i.type === 'insecure_rpc')) {
    recommendations.push('üåê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ HTTPS RPC endpoints')
  }
  
  if (allIssues.length === 0) {
    recommendations.push('‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã')
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  logger.info('Security audit completed', {
    issuesCount: allIssues.length,
    score,
    criticalIssues: allIssues.filter(i => i.severity === 'critical').length,
    highIssues: allIssues.filter(i => i.severity === 'high').length
  })
  
  return {
    passed: allIssues.filter(i => i.severity === 'critical' || i.severity === 'high').length === 0,
    issues: allIssues,
    score: Math.round(score),
    recommendations
  }
}

// Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export function createSecurityMiddleware() {
  return async (transaction: Transaction, connection: Connection) => {
    const auditResult = await performSecurityAudit(connection, transaction)
    
    if (!auditResult.passed) {
      const criticalIssues = auditResult.issues.filter(i => i.severity === 'critical')
      if (criticalIssues.length > 0) {
        throw new Error(`Security audit failed: ${criticalIssues.map(i => i.description).join(', ')}`)
      }
    }
    
    return auditResult
  }
}