/**
 * üéØ Smart Limit Orders System 2025
 * 
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ª–∏–º–∏—Ç-–æ—Ä–¥–µ—Ä–æ–≤ —Å –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
 * –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
 */

export interface SmartLimitOrder {
  id: string
  userId: string
  type: 'buy' | 'sell'
  from: 'TON' | 'NDT'
  to: 'TON' | 'NDT'
  amount: number
  targetRate: number
  triggerCondition: TriggerCondition
  executionType: ExecutionType
  timeDecay: boolean
  status: OrderStatus
  createdAt: number
  expiresAt?: number
  executedAt?: number
  partialExecutions: PartialExecution[]
  aiOptimization: AIOptimization
}

export interface TriggerCondition {
  type: 'price_drop' | 'price_spike' | 'volatility' | 'time_based' | 'volume_based'
  threshold: number
  operator: 'greater_than' | 'less_than' | 'equals'
  timeWindow?: number // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

export interface ExecutionType {
  mode: 'partial' | 'full' | 'dca' // Dollar Cost Averaging
  maxExecutions?: number
  executionInterval?: number // –¥–ª—è DCA
  minExecutionAmount?: number
}

export interface PartialExecution {
  id: string
  amount: number
  rate: number
  timestamp: number
  remainingAmount: number
}

export interface AIOptimization {
  enabled: boolean
  riskTolerance: 'low' | 'medium' | 'high'
  marketAnalysis: boolean
  gasOptimization: boolean
  slippageProtection: boolean
  dynamicAdjustment: boolean
}

export type OrderStatus = 'pending' | 'active' | 'partially_filled' | 'filled' | 'cancelled' | 'expired'

export interface MarketConditions {
  volatility: number
  volume24h: number
  priceTrend: 'bullish' | 'bearish' | 'sideways'
  gasPrice: number
  liquidity: number
}

export class SmartLimitOrderSystem {
  private orders: Map<string, SmartLimitOrder> = new Map()
  private marketData: MarketConditions = {
    volatility: 0,
    volume24h: 0,
    priceTrend: 'sideways',
    gasPrice: 0,
    liquidity: 0
  }
  private executionQueue: string[] = []
  private isProcessing = false

  constructor() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ä–¥–µ—Ä–æ–≤
    this.startOrderProcessor()
  }

  /**
   * üéØ –°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ª–∏–º–∏—Ç-–æ—Ä–¥–µ—Ä–∞
   */
  async createOrder(orderData: Omit<SmartLimitOrder, 'id' | 'createdAt' | 'status' | 'partialExecutions'>): Promise<SmartLimitOrder> {
    const order: SmartLimitOrder = {
      ...orderData,
      id: this.generateOrderId(),
      createdAt: Date.now(),
      status: 'pending',
      partialExecutions: []
    }

    // –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞
    if (order.aiOptimization.enabled) {
      await this.optimizeOrderWithAI(order)
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞
    this.validateOrder(order)

    this.orders.set(order.id, order)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    this.addToExecutionQueue(order.id)
    
    return order
  }

  /**
   * üß† –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞
   */
  private async optimizeOrderWithAI(order: SmartLimitOrder): Promise<void> {
    const marketAnalysis = await this.analyzeMarketConditions()
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
    const riskScore = this.calculateRiskScore(order, marketAnalysis)
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò
    if (order.aiOptimization.dynamicAdjustment) {
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫—É—Ä—Å–∞
      const optimalRate = this.calculateOptimalRate(order, marketAnalysis)
      order.targetRate = optimalRate
      
      // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      if (order.triggerCondition.type === 'volatility') {
        order.triggerCondition.threshold = this.calculateOptimalVolatilityThreshold(marketAnalysis)
      }
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∞–∑–æ–≤—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
    if (order.aiOptimization.gasOptimization) {
      const optimalGasPrice = await this.getOptimalGasPrice()
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∞–∑–∞
    }
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
    if (order.aiOptimization.slippageProtection) {
      const recommendedSlippage = this.calculateRecommendedSlippage(marketAnalysis)
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
    }
  }

  /**
   * üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
   */
  private async analyzeMarketConditions(): Promise<MarketConditions> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    
    return {
      volatility: Math.random() * 20, // 0-20%
      volume24h: 1000000 + Math.random() * 500000,
      priceTrend: ['bullish', 'bearish', 'sideways'][Math.floor(Math.random() * 3)] as any,
      gasPrice: 0.001 + Math.random() * 0.005,
      liquidity: 5000000 + Math.random() * 2000000
    }
  }

  /**
   * üéØ –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞
   */
  private calculateOptimalRate(order: SmartLimitOrder, market: MarketConditions): number {
    const currentRate = this.getCurrentRate(order.from, order.to)
    
    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
    let adjustment = 0
    if (market.priceTrend === 'bullish' && order.type === 'buy') {
      adjustment = 0.02 // +2% –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ
    } else if (market.priceTrend === 'bearish' && order.type === 'sell') {
      adjustment = -0.02 // -2% –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ
    }
    
    // –£—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    const volatilityAdjustment = market.volatility * 0.001 // 0.1% –Ω–∞ –∫–∞–∂–¥—ã–π % –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    
    return currentRate * (1 + adjustment + volatilityAdjustment)
  }

  /**
   * ‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ä–¥–µ—Ä–æ–≤
   */
  private startOrderProcessor(): void {
    setInterval(async () => {
      if (this.isProcessing) return
      
      this.isProcessing = true
      await this.processOrders()
      this.isProcessing = false
    }, 1000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  }

  /**
   * üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
   */
  private async processOrders(): Promise<void> {
    const activeOrders = Array.from(this.orders.values())
      .filter(order => order.status === 'active' || order.status === 'pending')
    
    for (const order of activeOrders) {
      try {
        await this.checkOrderTrigger(order)
      } catch (error) {
        console.error(`Error processing order ${order.id}:`, error)
      }
    }
  }

  /**
   * üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
   */
  private async checkOrderTrigger(order: SmartLimitOrder): Promise<void> {
    const currentRate = this.getCurrentRate(order.from, order.to)
    const marketConditions = await this.analyzeMarketConditions()
    
    let shouldExecute = false
    
    switch (order.triggerCondition.type) {
      case 'price_drop':
        shouldExecute = currentRate <= order.targetRate
        break
        
      case 'price_spike':
        shouldExecute = currentRate >= order.targetRate
        break
        
      case 'volatility':
        shouldExecute = marketConditions.volatility >= order.triggerCondition.threshold
        break
        
      case 'time_based':
        shouldExecute = Date.now() >= (order.createdAt + (order.triggerCondition.timeWindow || 0))
        break
        
      case 'volume_based':
        shouldExecute = marketConditions.volume24h >= order.triggerCondition.threshold
        break
    }
    
    if (shouldExecute) {
      await this.executeOrder(order, currentRate)
    }
  }

  /**
   * ‚ö° –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
   */
  private async executeOrder(order: SmartLimitOrder, currentRate: number): Promise<void> {
    const executionAmount = this.calculateExecutionAmount(order)
    
    if (executionAmount <= 0) {
      order.status = 'filled'
      return
    }
    
    // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    const partialExecution: PartialExecution = {
      id: this.generateExecutionId(),
      amount: executionAmount,
      rate: currentRate,
      timestamp: Date.now(),
      remainingAmount: order.amount - this.getTotalExecutedAmount(order)
    }
    
    order.partialExecutions.push(partialExecution)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
    if (partialExecution.remainingAmount <= 0) {
      order.status = 'filled'
      order.executedAt = Date.now()
    } else {
      order.status = 'partially_filled'
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–≤–æ–ø
    await this.executeSwap(order, partialExecution)
    
    // Time decay –ª–æ–≥–∏–∫–∞
    if (order.timeDecay) {
      this.applyTimeDecay(order)
    }
  }

  /**
   * üí∞ –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private calculateExecutionAmount(order: SmartLimitOrder): number {
    const totalExecuted = this.getTotalExecutedAmount(order)
    const remainingAmount = order.amount - totalExecuted
    
    if (remainingAmount <= 0) return 0
    
    switch (order.executionType.mode) {
      case 'full':
        return remainingAmount
        
      case 'partial':
        const maxPartialAmount = order.executionType.minExecutionAmount || remainingAmount * 0.1
        return Math.min(remainingAmount, maxPartialAmount)
        
      case 'dca':
        const dcaAmount = remainingAmount / (order.executionType.maxExecutions || 10)
        return Math.min(dcaAmount, remainingAmount)
        
      default:
        return remainingAmount
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π
   */
  private getTotalExecutedAmount(order: SmartLimitOrder): number {
    return order.partialExecutions.reduce((total, execution) => total + execution.amount, 0)
  }

  /**
   * üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞—Ç—É—Ö–∞–Ω–∏—è
   */
  private applyTimeDecay(order: SmartLimitOrder): void {
    const timeElapsed = Date.now() - order.createdAt
    const decayFactor = Math.exp(-timeElapsed / (24 * 60 * 60 * 1000)) // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    order.targetRate *= (1 - (1 - decayFactor) * 0.1) // –ú–∞–∫—Å–∏–º—É–º 10% –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
  }

  /**
   * ‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤–æ–ø–∞
   */
  private async executeSwap(order: SmartLimitOrder, execution: PartialExecution): Promise<void> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AdvancedAMM
    console.log('Executing swap:', execution.amount, order.from, '->', order.to, 'at rate', execution.rate)
    
    // –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞
    // await fetch('/api/dex/swap', {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify({
    //     from: order.from,
    //     to: order.to,
    //     amount: execution.amount,
    //     slippage: 0.5
    //   })
    // })
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
   */
  private getCurrentRate(from: 'TON' | 'NDT', to: 'TON' | 'NDT'): number {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∫—É—Ä—Å–æ–≤
    return from === 'TON' && to === 'NDT' ? 42.7 : 0.0234
  }

  /**
   * üéØ –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–∞
   */
  private calculateRiskScore(order: SmartLimitOrder, market: MarketConditions): number {
    let riskScore = 0
    
    // –†–∏—Å–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    riskScore += market.volatility * 2
    
    // –†–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
    const orderSizeRisk = (order.amount / market.liquidity) * 100
    riskScore += orderSizeRisk
    
    // –†–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (order.expiresAt) {
      const timeRisk = (order.expiresAt - Date.now()) / (24 * 60 * 60 * 1000) // –¥–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
      riskScore += timeRisk * 5
    }
    
    return Math.min(riskScore, 100) // –ú–∞–∫—Å–∏–º—É–º 100
  }

  /**
   * üßÆ –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
   */
  private calculateOptimalVolatilityThreshold(market: MarketConditions): number {
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    const baseThreshold = 10 // 10% –±–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥
    const adjustment = market.volatility * 0.5 // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ 50% –æ—Ç —Ç–µ–∫—É—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    
    return Math.max(5, Math.min(20, baseThreshold + adjustment)) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5-20%
  }

  /**
   * üí∞ –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
   */
  private calculateRecommendedSlippage(market: MarketConditions): number {
    const baseSlippage = 0.5 // 0.5% –±–∞–∑–æ–≤–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
    const volatilityAdjustment = market.volatility * 0.1 // +0.1% –Ω–∞ –∫–∞–∂–¥—ã–π % –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    
    return Math.min(baseSlippage + volatilityAdjustment, 2) // –ú–∞–∫—Å–∏–º—É–º 2%
  }

  /**
   * ‚õΩ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≥–∞–∑–∞
   */
  private async getOptimalGasPrice(): Promise<number> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å gas price API
    return 0.001 + Math.random() * 0.005
  }

  /**
   * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞
   */
  private validateOrder(order: SmartLimitOrder): void {
    if (order.amount <= 0) {
      throw new Error('Order amount must be positive')
    }
    
    if (order.targetRate <= 0) {
      throw new Error('Target rate must be positive')
    }
    
    if (order.from === order.to) {
      throw new Error('From and to currencies must be different')
    }
    
    if (order.expiresAt && order.expiresAt <= Date.now()) {
      throw new Error('Order expiration time must be in the future')
    }
  }

  /**
   * üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private addToExecutionQueue(orderId: string): void {
    if (!this.executionQueue.includes(orderId)) {
      this.executionQueue.push(orderId)
    }
  }

  /**
   * üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –æ—Ä–¥–µ—Ä–∞
   */
  private generateOrderId(): string {
    return `order_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  /**
   * üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private generateExecutionId(): string {
    return `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
   */
  getOrderStats(userId?: string) {
    const orders = userId 
      ? Array.from(this.orders.values()).filter(order => order.userId === userId)
      : Array.from(this.orders.values())
    
    return {
      total: orders.length,
      active: orders.filter(o => o.status === 'active').length,
      filled: orders.filter(o => o.status === 'filled').length,
      cancelled: orders.filter(o => o.status === 'cancelled').length,
      totalVolume: orders.reduce((sum, order) => sum + order.amount, 0),
      averageExecutionTime: this.calculateAverageExecutionTime(orders)
    }
  }

  /**
   * ‚è±Ô∏è –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private calculateAverageExecutionTime(orders: SmartLimitOrder[]): number {
    const executedOrders = orders.filter(o => o.executedAt)
    if (executedOrders.length === 0) return 0
    
    const totalTime = executedOrders.reduce((sum, order) => {
      return sum + (order.executedAt! - order.createdAt)
    }, 0)
    
    return totalTime / executedOrders.length
  }

  /**
   * üéØ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
   */
  async cancelOrder(orderId: string, userId: string): Promise<boolean> {
    const order = this.orders.get(orderId)
    if (!order || order.userId !== userId) {
      return false
    }
    
    if (order.status === 'filled' || order.status === 'cancelled') {
      return false
    }
    
    order.status = 'cancelled'
    this.orders.set(orderId, order)
    
    return true
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getUserOrders(userId: string): SmartLimitOrder[] {
    return Array.from(this.orders.values())
      .filter(order => order.userId === userId)
      .sort((a, b) => b.createdAt - a.createdAt)
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const smartLimitOrderSystem = new SmartLimitOrderSystem()
