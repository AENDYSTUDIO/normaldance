import { NextRequest, NextResponse } from 'next/server'
import { logger } from './logger'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
export interface SecurityCheckResult {
  passed: boolean
  issues: SecurityIssue[]
  score: number
  recommendations: string[]
}

interface SecurityIssue {
  category: 'keys' | 'cors' | 'headers' | 'logging' | 'validation'
  severity: 'low' | 'medium' | 'high' | 'critical'
  description: string
  fix: string
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –∫–æ–¥–µ –∏ env
export function checkPrivateKeys(): SecurityIssue[] {
  const issues: SecurityIssue[] = []
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const dangerousEnvVars = [
    'PRIVATE_KEY',
    'SECRET_KEY', 
    'WALLET_PRIVATE_KEY',
    'SOLANA_PRIVATE_KEY'
  ]
  
  dangerousEnvVars.forEach(envVar => {
    if (process.env[envVar] && process.env.NODE_ENV === 'production') {
      issues.push({
        category: 'keys',
        severity: 'critical',
        description: `–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ production env: ${envVar}`,
        fix: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª—é—á–µ–π (AWS KMS, HashiCorp Vault)'
      })
    }
  })
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–∞ –≤ –∫–æ–¥–µ (–±–∞–∑–æ–≤–∞—è)
  if (typeof window === 'undefined') {
    const suspiciousPatterns = [
      /[0-9a-fA-F]{64}/, // 64-—Å–∏–º–≤–æ–ª—å–Ω—ã–µ hex —Å—Ç—Ä–æ–∫–∏
      /[1-9A-HJ-NP-Za-km-z]{87,88}/, // Base58 –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
    ]
    
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã, –∑–¥–µ—Å—å –∑–∞–≥–ª—É—à–∫–∞
    const hasHardcodedKeys = false // TODO: —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    
    if (hasHardcodedKeys) {
      issues.push({
        category: 'keys',
        severity: 'critical',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∫–æ–¥–µ',
        fix: '–£–¥–∞–ª–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –∫–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è'
      })
    }
  }
  
  return issues
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫
export function checkCORSSettings(): SecurityIssue[] {
  const issues: SecurityIssue[] = []
  
  const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',') || []
  
  if (allowedOrigins.includes('*') && process.env.NODE_ENV === 'production') {
    issues.push({
      category: 'cors',
      severity: 'high',
      description: 'CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ * –≤ production',
      fix: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã –≤ ALLOWED_ORIGINS'
    })
  }
  
  if (allowedOrigins.length === 0) {
    issues.push({
      category: 'cors',
      severity: 'medium',
      description: 'CORS origins –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
      fix: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ ALLOWED_ORIGINS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
    })
  }
  
  return issues
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
export function checkSecurityHeaders(response: NextResponse): SecurityIssue[] {
  const issues: SecurityIssue[] = []
  
  const requiredHeaders = {
    'X-Content-Type-Options': 'nosniff',
    'X-Frame-Options': 'DENY',
    'X-XSS-Protection': '1; mode=block',
    'Referrer-Policy': 'strict-origin-when-cross-origin',
    'Content-Security-Policy': 'default-src \'self\''
  }
  
  Object.entries(requiredHeaders).forEach(([header, expectedValue]) => {
    const actualValue = response.headers.get(header)
    if (!actualValue) {
      issues.push({
        category: 'headers',
        severity: 'medium',
        description: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${header}`,
        fix: `–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${header}: ${expectedValue}`
      })
    }
  })
  
  return issues
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
export function checkLoggingSecurity(): SecurityIssue[] {
  const issues: SecurityIssue[] = []
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
  const sensitiveFields = [
    'password',
    'privateKey',
    'secret',
    'token',
    'apiKey',
    'signature'
  ]
  
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–≥–µ—Ä–∞
  const loggerConfig = {
    redactFields: ['password', 'privateKey'] // –ü—Ä–∏–º–µ—Ä
  }
  
  sensitiveFields.forEach(field => {
    if (!loggerConfig.redactFields?.includes(field)) {
      issues.push({
        category: 'logging',
        severity: 'medium',
        description: `–ü–æ–ª–µ ${field} –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤ –ª–æ–≥–∏`,
        fix: `–î–æ–±–∞–≤—å—Ç–µ ${field} –≤ redactFields –ª–æ–≥–≥–µ—Ä–∞`
      })
    }
  })
  
  return issues
}

// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
export function securityHeadersMiddleware(request: NextRequest) {
  const response = NextResponse.next()
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-XSS-Protection', '1; mode=block')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  
  // CSP –¥–ª—è production
  if (process.env.NODE_ENV === 'production') {
    response.headers.set(
      'Content-Security-Policy',
      "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https: wss:;"
    )
  }
  
  // CORS
  const origin = request.headers.get('origin')
  const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000']
  
  if (origin && allowedOrigins.includes(origin)) {
    response.headers.set('Access-Control-Allow-Origin', origin)
    response.headers.set('Access-Control-Allow-Credentials', 'true')
    response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
    response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  }
  
  return response
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
export function performSecurityCheck(): SecurityCheckResult {
  const allIssues: SecurityIssue[] = []
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  allIssues.push(...checkPrivateKeys())
  allIssues.push(...checkCORSSettings())
  allIssues.push(...checkLoggingSecurity())
  
  // –ü–æ–¥—Å—á–µ—Ç score
  const severityWeights = { low: 1, medium: 3, high: 7, critical: 15 }
  const totalWeight = allIssues.reduce((sum, issue) => sum + severityWeights[issue.severity], 0)
  const score = Math.max(0, 100 - totalWeight)
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const recommendations: string[] = []
  
  if (allIssues.some(i => i.severity === 'critical')) {
    recommendations.push('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
  }
  
  if (allIssues.some(i => i.category === 'keys')) {
    recommendations.push('üîê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏')
  }
  
  if (allIssues.some(i => i.category === 'cors')) {
    recommendations.push('üåê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CORS –¥–ª—è production')
  }
  
  if (allIssues.length === 0) {
    recommendations.push('‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã')
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  logger.info('Security check completed', {
    issuesCount: allIssues.length,
    score,
    criticalIssues: allIssues.filter(i => i.severity === 'critical').length
  })
  
  return {
    passed: allIssues.filter(i => i.severity === 'critical' || i.severity === 'high').length === 0,
    issues: allIssues,
    score: Math.round(score),
    recommendations
  }
}

// API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
export async function securityCheckAPI(): Promise<Response> {
  try {
    const result = performSecurityCheck()
    return Response.json(result)
  } catch (error) {
    logger.error('Security check failed', { error })
    return new Response('Security check failed', { status: 500 })
  }
}