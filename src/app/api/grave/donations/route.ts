import { NextRequest, NextResponse } from 'next/server'

// POST /api/grave/donations - –°–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –º–µ–º–æ—Ä–∏–∞–ª
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { memorialId, amount, message } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!memorialId || !amount || amount <= 0) {
      return NextResponse.json(
        { success: false, error: 'Invalid donation data' },
        { status: 400 }
      )
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–µ–º–æ—Ä–∏–∞–ª–∞
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ
    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–º–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞
    // 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–≤

    const donation = {
      id: Date.now().toString(),
      memorialId,
      amount,
      message: message || '',
      donor: '0x' + Math.random().toString(16).substr(2, 40), // –ú–æ–∫-–∞–¥—Ä–µ—Å
      timestamp: new Date().toISOString(),
      transactionHash: '0x' + Math.random().toString(16).substr(2, 64), // –ú–æ–∫-—Ö–µ—à
      status: 'PENDING'
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ
    console.log('–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ:', donation)

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ smart-contract
    // await contract.donate(memorialId, message, { value: ethers.utils.parseEther(amount.toString()) })

    return NextResponse.json({
      success: true,
      data: donation,
      message: 'Donation processed successfully'
    })

  } catch (error) {
    console.error('Error processing donation:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to process donation' },
      { status: 500 }
    )
  }
}

// GET /api/grave/donations?memorialId=123 - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –¥–ª—è –º–µ–º–æ—Ä–∏–∞–ª–∞
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const memorialId = searchParams.get('memorialId')

    if (!memorialId) {
      return NextResponse.json(
        { success: false, error: 'Memorial ID required' },
        { status: 400 }
      )
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å –±–ª–æ–∫—á–µ–π–Ω–∞
    const mockDonations = [
      {
        id: '1',
        memorialId,
        amount: 0.05,
        message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –º—É–∑—ã–∫—É! üéµ',
        donor: '0x1234567890abcdef1234567890abcdef12345678',
        timestamp: '2024-12-01T10:30:00Z',
        transactionHash: '0x456789abcdef123456789abcdef123456789abcdef123456789abcdef123456789',
        status: 'COMPLETED'
      },
      {
        id: '2',
        memorialId,
        amount: 0.025,
        message: '–¢–≤–æ—è –º—É–∑—ã–∫–∞ –∂–∏–≤–µ—Ç –≤ –Ω–∞—à–∏—Ö —Å–µ—Ä–¥—Ü–∞—Ö',
        donor: '0xabcdef1234567890abcdef1234567890abcdef12',
        timestamp: '2024-12-02T15:45:00Z',
        transactionHash: '0x789abcdef123456789abcdef123456789abcdef123456789abcdef123456789',
        status: 'COMPLETED'
      }
    ]

    return NextResponse.json({
      success: true,
      data: mockDonations
    })

  } catch (error) {
    console.error('Error fetching donations:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to fetch donations' },
      { status: 500 }
    )
  }
}