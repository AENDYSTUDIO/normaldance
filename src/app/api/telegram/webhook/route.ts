import { NextRequest, NextResponse } from 'next/server'
import { telegramIntegration2025 } from '@/lib/telegram-integration-2025'

// POST /api/telegram/webhook - Telegram webhook handler
export async function POST(request: Request) {
  try {
    const body = await request.json()
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (body.message) {
      await handleMessage(body.message)
    } else if (body.callback_query) {
      await handleCallbackQuery(body.callback_query)
    } else if (body.inline_query) {
      await handleInlineQuery(body.inline_query)
    } else if (body.pre_checkout_query) {
      await handlePreCheckoutQuery(body.pre_checkout_query)
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error('Error processing Telegram webhook:', error)
    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 })
  }
}

// GET /api/telegram/webhook - Webhook info
export async function GET(request: Request) {
  return NextResponse.json({
    status: 'active',
    integration: 'Telegram 2025',
    features: [
      'mini_app',
      'social_payments',
      'notifications',
      'analytics',
      'quick_swap'
    ],
    timestamp: Date.now()
  })
}

/**
 * üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function handleMessage(message: any) {
  const chatId = message.chat.id
  const userId = message.from.id
  const text = message.text

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (text?.startsWith('/')) {
    await handleCommand(chatId, userId, text, message.from)
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  else if (text) {
    await handleTextMessage(chatId, userId, text, message.from)
  }
}

/**
 * üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
 */
async function handleCommand(chatId: number, userId: number, command: string, user: any) {
  switch (command) {
    case '/start':
      await telegramIntegration2025.sendTelegramMessage(chatId, {
        text: `üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NormalDance DEX!*\n\n` +
              `–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π DEX —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ AMM –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.\n\n` +
              `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
              `/dex - –û—Ç–∫—Ä—ã—Ç—å DEX –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n` +
              `/analytics - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n` +
              `/orders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏\n` +
              `/help - –°–ø—Ä–∞–≤–∫–∞\n\n` +
              `*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ 2025:*\n` +
              `ü§ñ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑—ã\n` +
              `üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏\n` +
              `‚ö° –ì–∏–±—Ä–∏–¥–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã AMM\n` +
              `üíß –£–º–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞\n` +
              `üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å DEX',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex` }
              }
            ],
            [
              {
                text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/analytics` }
              },
              {
                text: 'üéØ –û—Ä–¥–µ—Ä–∞',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex?tab=orders` }
              }
            ]
          ]
        }
      })
      break

    case '/dex':
      await telegramIntegration2025.sendTelegramMessage(chatId, {
        text: `üíé *NormalDance DEX*\n\n` +
              `–û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ TON ‚Üî NDT —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üí± –ë—ã—Å—Ç—Ä—ã–π —Å–≤–æ–ø',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex?action=swap` }
              }
            ],
            [
              {
                text: 'üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex?tab=liquidity` }
              },
              {
                text: 'üéØ –£–º–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex?tab=orders` }
              }
            ],
            [
              {
                text: 'üìä Advanced Dashboard',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex?tab=advanced` }
              }
            ]
          ]
        }
      })
      break

    case '/analytics':
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      await telegramIntegration2025.sendTelegramMessage(chatId, {
        text: `üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ NormalDance DEX*\n\n` +
              `–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –û—Ç–∫—Ä—ã—Ç—å Dashboard',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/analytics` }
              }
            ]
          ]
        }
      })
      break

    case '/orders':
      await telegramIntegration2025.sendTelegramMessage(chatId, {
        text: `üéØ *–£–º–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞*\n\n` +
              `–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏ —Å –ò–ò-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π:`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìã –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex?tab=orders` }
              }
            ],
            [
              {
                text: '‚ûï –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä',
                web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex?tab=orders&action=create` }
              }
            ]
          ]
        }
      })
      break

    case '/help':
      await telegramIntegration2025.sendTelegramMessage(chatId, {
        text: `‚ùì *–°–ø—Ä–∞–≤–∫–∞ NormalDance DEX*\n\n` +
              `*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n` +
              `‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è TON ‚Üî NDT\n` +
              `‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n` +
              `‚Ä¢ –£–º–Ω—ã–µ –ª–∏–º–∏—Ç-–æ—Ä–¥–µ—Ä–∞\n` +
              `‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏\n` +
              `‚Ä¢ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑—ã\n\n` +
              `*–ö–æ–º–∞–Ω–¥—ã:*\n` +
              `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
              `/dex - –û—Ç–∫—Ä—ã—Ç—å DEX\n` +
              `/analytics - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n` +
              `/orders - –û—Ä–¥–µ—Ä–∞\n` +
              `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
              `*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @normaldance_support`,
        parse_mode: 'Markdown'
      })
      break

    default:
      await telegramIntegration2025.sendTelegramMessage(chatId, {
        text: `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.`
      })
  }
}

/**
 * üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function handleTextMessage(chatId: number, userId: number, text: string, user: any) {
  // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
  const lowerText = text.toLowerCase()
  
  if (lowerText.includes('—Ü–µ–Ω–∞') || lowerText.includes('–∫—É—Ä—Å')) {
    await telegramIntegration2025.sendTelegramMessage(chatId, {
      text: `üíé *–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å NDT/TON*\n\n` +
            `–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...`,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ DEX',
              web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex` }
            }
          ]
        ]
      }
    })
  }
  
  else if (lowerText.includes('—Ç–æ—Ä–≥–æ–≤–∞—Ç—å') || lowerText.includes('—Å–≤–æ–ø')) {
    await telegramIntegration2025.sendTelegramMessage(chatId, {
      text: `üí± *–ì–æ—Ç–æ–≤—ã —Ç–æ—Ä–≥–æ–≤–∞—Ç—å?*\n\n` +
            `–û—Ç–∫—Ä–æ–π—Ç–µ DEX –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–≤–æ–ø–∞ TON ‚Üî NDT:`,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üí± –ë—ã—Å—Ç—Ä—ã–π —Å–≤–æ–ø',
              web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex?action=swap` }
            }
          ]
        ]
      }
    })
  }
  
  else {
    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç—å DEX
    await telegramIntegration2025.sendTelegramMessage(chatId, {
      text: `ü§ñ *NormalDance DEX Assistant*\n\n` +
            `–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π TON ‚Üî NDT. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ DEX:`,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å DEX',
              web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex` }
            }
          ],
          [
            {
              text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
              web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/analytics` }
            },
            {
              text: '‚ùì –°–ø—Ä–∞–≤–∫–∞',
              callback_data: 'help'
            }
          ]
        ]
      }
    })
  }
}

/**
 * üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
 */
async function handleCallbackQuery(callbackQuery: any) {
  const chatId = callbackQuery.message.chat.id
  const userId = callbackQuery.from.id
  const data = callbackQuery.data

  // –û—Ç–≤–µ—Ç –Ω–∞ callback query
  await telegramIntegration2025.sendTelegramMessage(chatId, {
    text: `‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${data}`,
    reply_to_message_id: callbackQuery.message.message_id
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö callback'–æ–≤
  if (data === 'help') {
    await handleCommand(chatId, userId, '/help', callbackQuery.from)
  }
  
  else if (data.startsWith('accept_payment_')) {
    const paymentId = data.replace('accept_payment_', '')
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–ª–∞—Ç–µ–∂–∞
    console.log(`Payment ${paymentId} accepted by user ${userId}`)
  }
  
  else if (data.startsWith('decline_payment_')) {
    const paymentId = data.replace('decline_payment_', '')
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    console.log(`Payment ${paymentId} declined by user ${userId}`)
  }
}

/**
 * üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ inline query
 */
async function handleInlineQuery(inlineQuery: any) {
  const queryId = inlineQuery.id
  const query = inlineQuery.query.toLowerCase()
  const userId = inlineQuery.from.id

  const results = []

  // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  if (query.includes('swap') || query.includes('—Å–≤–æ–ø')) {
    results.push({
      type: 'article',
      id: 'swap_ton_ndt',
      title: 'üí± –°–≤–æ–ø TON ‚Üî NDT',
      description: '–ë—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω TON –Ω–∞ NDT –∏ –æ–±—Ä–∞—Ç–Ω–æ',
      input_message_content: {
        message_text: `üí± *–°–≤–æ–ø TON ‚Üî NDT*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ DEX –¥–ª—è –æ–±–º–µ–Ω–∞:`,
        parse_mode: 'Markdown'
      },
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å DEX',
              web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/dex?action=swap` }
            }
          ]
        ]
      }
    })
  }

  if (query.includes('analytics') || query.includes('–∞–Ω–∞–ª–∏—Ç–∏–∫–∞')) {
    results.push({
      type: 'article',
      id: 'analytics_dashboard',
      title: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ DEX',
      description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤',
      input_message_content: {
        message_text: `üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ NormalDance DEX*\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:`,
        parse_mode: 'Markdown'
      },
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üìä –û—Ç–∫—Ä—ã—Ç—å Dashboard',
              web_app: { url: `${process.env.TELEGRAM_WEB_APP_URL}/analytics` }
            }
          ]
        ]
      }
    })
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  await telegramIntegration2025.sendTelegramMessage('', {
    method: 'answerInlineQuery',
    inline_query_id: queryId,
    results: JSON.stringify(results)
  })
}

/**
 * üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout query
 */
async function handlePreCheckoutQuery(preCheckoutQuery: any) {
  const queryId = preCheckoutQuery.id
  const userId = preCheckoutQuery.from.id
  const currency = preCheckoutQuery.currency
  const totalAmount = preCheckoutQuery.total_amount

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
  const isValid = currency === 'TON' && totalAmount > 0

  // –û—Ç–≤–µ—Ç –Ω–∞ pre-checkout query
  await telegramIntegration2025.sendTelegramMessage('', {
    method: 'answerPreCheckoutQuery',
    pre_checkout_query_id: queryId,
    ok: isValid
  })
}
